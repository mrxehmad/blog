<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Ehmi</title>
    <link href="https://blog.ehmad.site/feed.xml" rel="self" />
    <link href="https://blog.ehmad.site" />
    <updated>2024-12-04T09:25:55+05:00</updated>
    <author>
        <name>Ehmad</name>
    </author>
    <id>https://blog.ehmad.site</id>

    <entry>
        <title>Streaming live audio over Wi-Fi with an ESP8266</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/streaming-live-audio-over-wi-fi-with-an-esp8266/"/>
        <id>https://blog.ehmad.site/streaming-live-audio-over-wi-fi-with-an-esp8266/</id>

        <updated>2024-12-04T09:25:55+05:00</updated>
            <summary>
                <![CDATA[
                    Streaming live audio over Wi-Fi with an ESP8266 is a fascinating project but has some limitations due to the hardware’s constrained resources. The ESP8266 is designed for IoT applications and may not handle high-quality audio streaming directly. However, with careful design, it’s possible to achieve&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Streaming live audio over Wi-Fi with an <strong>ESP8266</strong> is a fascinating project but has some limitations due to the hardware’s constrained resources. The ESP8266 is designed for IoT applications and may not handle high-quality audio streaming directly. However, with careful design, it’s possible to achieve low-bitrate audio streaming. Here’s how you can do it:</p><hr>
<h3 id="1-components-needed"><strong>1. Components Needed</strong></h3>
<ul>
<li><strong>ESP8266</strong> (e.g., NodeMCU or Wemos D1 Mini)</li>
<li><strong>Microphone Module</strong> (e.g., MAX9814, MAX4466, or an I2S mic like INMP441)</li>
<li><strong>ADC (Analog-to-Digital Converter)</strong> (if using an analog mic)</li>
<li><strong>Power Supply</strong> (5V for ESP8266)</li>
</ul>
<hr>
<h3 id="2-challenges"><strong>2. Challenges</strong></h3>
<ul>
<li><strong>ESP8266 Limitations</strong>: It has limited processing power, no hardware audio codec, and only a single ADC channel with 10-bit resolution.</li>
<li><strong>Audio Sampling</strong>: The ADC sampling rate is relatively low, so audio quality might not be high.</li>
<li><strong>Wi-Fi Bandwidth</strong>: Streaming consumes bandwidth, and the ESP8266 may struggle to maintain a stable stream under heavy load.</li>
</ul>
<hr>
<h3 id="3-basic-approach"><strong>3. Basic Approach</strong></h3>
<h4 id="a-analog-microphone-with-adc">(a) <strong>Analog Microphone with ADC</strong>:</h4>
<ol>
<li>Connect the mic’s output to the ESP8266’s ADC (A0 pin).</li>
<li>Write firmware to sample audio at a low rate (e.g., 8 kHz for voice) using ESP8266’s ADC.</li>
</ol>
<h4 id="b-i2s-microphone-preferred">(b) <strong>I2S Microphone (Preferred)</strong>:</h4>
<ol>
<li>Use an I2S microphone like the INMP441 for digital audio capture. The ESP8266 doesn’t natively support I2S input, so use an ESP32 if possible.</li>
<li>If sticking to ESP8266, consider external I2S-to-serial converters (though it’s complex).</li>
</ol>
<h4 id="c-audio-compression">(c) <strong>Audio Compression</strong>:</h4>
<p>To fit the bandwidth and processing constraints, compress the audio using a simple codec:</p><ul>
<li>PCM (Uncompressed): Simple but bandwidth-heavy.</li>
<li>ADPCM: A simple lossy compression method.</li>
<li>Opus (if using more advanced hardware like ESP32).</li>
</ul>
<h4 id="d-streaming-protocol">(d) <strong>Streaming Protocol</strong>:</h4>
<p>Send the audio data over Wi-Fi using a lightweight protocol:</p><ul>
<li>Use <strong>HTTP</strong> or <strong>WebSocket</strong> to stream audio to a server or client.</li>
<li>Alternatively, send data via <strong>UDP</strong> for low latency.</li>
</ul>
<hr>
<h3 id="4-software-implementation"><strong>4. Software Implementation</strong></h3>
<p>Here’s a basic framework for the firmware:</p><ol>
<li><strong>Set up ADC</strong> to sample the microphone input.</li>
<li><strong>Buffer the audio samples</strong> in small chunks.</li>
<li><strong>Send the audio buffer</strong> over Wi-Fi to a server or directly to a listening client.</li>
</ol>
<h4 id="example-code-snippet-pseudo-arduino"><strong>Example Code Snippet (Pseudo-Arduino)</strong></h4>
<pre><code class="language-cpp">#include &lt;ESP8266WiFi.h&gt;
#include &lt;WiFiClient.h&gt;

const char* ssid = &quot;Your_SSID&quot;;
const char* password = &quot;Your_PASSWORD&quot;;
const char* serverIP = &quot;192.168.1.100&quot;; // Destination server
const int serverPort = 12345; // Destination port

WiFiClient client;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(&quot;.&quot;);
  }
  Serial.println(&quot;WiFi connected&quot;);
}

void loop() {
  if (!client.connected()) {
    client.connect(serverIP, serverPort);
  }

  int sample = analogRead(A0); // Read from mic (0-1023)
  byte lowByte = sample &amp; 0xFF;
  byte highByte = (sample &gt;&gt; 8) &amp; 0xFF;

  client.write(lowByte);
  client.write(highByte);

  delayMicroseconds(125); // ~8kHz sampling rate
}
</code></pre>
<hr>
<h3 id="5-server-side"><strong>5. Server-Side</strong></h3>
<p>Set up a server (e.g., using Python) to receive and play the audio stream. Here’s a basic framework:</p><h4 id="python-server"><strong>Python Server</strong></h4>
<pre><code class="language-python">import socket

server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind((&#39;0.0.0.0&#39;, 12345))
server.listen(1)

print(&quot;Waiting for connection...&quot;)
conn, addr = server.accept()
print(f&quot;Connected by {addr}&quot;)

while True:
    data = conn.recv(1024)  # Read audio stream
    if not data:
        break
    # Process audio data (e.g., save or play it)
    print(data)
</code></pre>
<hr>
<h3 id="6-considerations"><strong>6. Considerations</strong></h3>
<ul>
<li><strong>Upgrade to ESP32</strong>: If audio quality and I2S support are critical.</li>
<li><strong>External Audio Processor</strong>: Use external ADCs or DSPs for higher-quality audio.</li>
<li><strong>Bandwidth Management</strong>: Ensure efficient encoding and sampling rates to avoid network issues.</li>
</ul>
<p>This setup can work for basic audio streaming. Let me know if you’d like help optimizing or scaling it!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Securely Connecting to an RDP Server Using Cloudflare Zero Trust and WARP</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/securely-connecting-to-an-rdp-server-using-cloudflare-zero-trust-and-warp/"/>
        <id>https://blog.ehmad.site/securely-connecting-to-an-rdp-server-using-cloudflare-zero-trust-and-warp/</id>

        <updated>2024-11-29T13:34:41+05:00</updated>
            <summary>
                <![CDATA[
                    Accessing Remote Desktop Protocol (RDP) servers securely is critical for managing internal systems without exposing them to the public internet. Cloudflare Zero Trust, combined with Cloudflare Tunnel and the WARP client, provides an effective and secure solution for remote access. This guide walks through the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Accessing Remote Desktop Protocol (RDP) servers securely is critical for managing internal systems without exposing them to the public internet. Cloudflare Zero Trust, combined with Cloudflare Tunnel and the WARP client, provides an effective and secure solution for remote access. This guide walks through the process of securely connecting to your RDP server using these tools.</p><hr>
<h3 id="benefits-of-using-cloudflare-zero-trust-for-rdp"><strong>Benefits of Using Cloudflare Zero Trust for RDP</strong></h3>
<ul>
<li><strong>Enhanced Security</strong>: No public IP exposure; connections are routed securely through Cloudflare’s network.</li>
<li><strong>Access Control</strong>: Fine-tune access policies to restrict or grant permissions based on users, devices, or groups.</li>
<li><strong>Private Connectivity</strong>: Devices act as though they are on the private network, ensuring seamless access.</li>
</ul>
<hr>
<h3 id="step-by-step-guide"><strong>Step-by-Step Guide</strong></h3>
<h4 id="1-connect-your-server-to-cloudflare"><strong>1. Connect Your Server to Cloudflare</strong></h4>
<p>The first step is to set up a Cloudflare Tunnel to create an outbound-only connection from your server to Cloudflare’s global network.</p><ol>
<li><p><strong>Create a Cloudflare Tunnel</strong>:</p><ul>
<li>Install the <strong>cloudflared</strong> agent on your RDP server:<pre><code class="language-bash">curl -fsSL https://developers.cloudflare.com/cloudflare-one/static/downloads/cloudflared-linux-amd64.deb -o cloudflared.deb
sudo dpkg -i cloudflared.deb
</code></pre>
</li>
<li>Authenticate with your Cloudflare account:<pre><code class="language-bash">cloudflared login
</code></pre>
</li>
<li>After login, create a tunnel:<pre><code class="language-bash">cloudflared tunnel create rdp-server
</code></pre>
</li>
</ul>
</li>
<li><p><strong>Add Private Network Configuration</strong>:</p><ul>
<li>In the <strong>Cloudflare Zero Trust Dashboard</strong>, go to <strong>Access</strong> → <strong>Tunnels</strong> and locate the newly created tunnel.</li>
<li>Under the <strong>Private Networks</strong> tab, add the private IP of your server (e.g., <code>10.1.15.150</code>) or a range that includes the server’s IP.</li>
</ul>
</li>
<li><p><strong>Run the Tunnel</strong>:</p><ul>
<li>Use the following command to start the tunnel:<pre><code class="language-bash">cloudflared tunnel run rdp-server
</code></pre>
</li>
</ul>
<p>Alternatively, configure the tunnel to run as a service:</p><pre><code class="language-bash">sudo cloudflared service install
sudo systemctl start cloudflared
</code></pre>
</li>
</ol>
<hr>
<h4 id="2-configure-cloudflare-zero-trust-policies"><strong>2. Configure Cloudflare Zero Trust Policies</strong></h4>
<p>Control who can access your RDP server by defining Zero Trust access policies.</p><ol>
<li><p><strong>Navigate to Access Policies</strong>:</p><ul>
<li>In the <strong>Zero Trust Dashboard</strong>, go to <strong>Access</strong> → <strong>Applications</strong> and add a new <strong>Private Network</strong> application.</li>
</ul>
</li>
<li><p><strong>Add an Application</strong>:</p><ul>
<li><strong>Name</strong>: Enter a descriptive name, such as <code>RDP Access</code>.</li>
<li><strong>Private IP</strong>: Enter the internal IP of your RDP server (e.g., <code>10.1.15.150</code>).</li>
</ul>
</li>
<li><p><strong>Define Access Policies</strong>:</p><ul>
<li>Specify the users, groups, or devices that are allowed to access this service. For example:<ul>
<li>Allow access only to specific email addresses.</li>
<li>Restrict access to managed devices.</li>
<li>Block connections from untrusted locations.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Save and Apply</strong>:</p><ul>
<li>Save the application and access policies.</li>
</ul>
</li>
</ol>
<hr>
<h4 id="3-set-up-the-warp-client-on-client-devices"><strong>3. Set Up the WARP Client on Client Devices</strong></h4>
<p>The WARP client routes traffic from remote devices to your private network.</p><ol>
<li><p><strong>Deploy WARP</strong>:</p><ul>
<li>Install the Cloudflare WARP client on your devices:<ul>
<li><a href="https://www.cloudflare.com/products/warp/">Download WARP</a> for Windows, macOS, iOS, or Android.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Enroll Devices in Zero Trust</strong>:</p><ul>
<li>In the Zero Trust Dashboard, go to <strong>Settings</strong> → <strong>Device Enrollment</strong> and create an enrollment policy.</li>
<li>Follow the enrollment process on the WARP client:<ul>
<li>Open WARP.</li>
<li>Go to <strong>Settings</strong> → <strong>Account</strong> → <strong>Login with Zero Trust</strong>.</li>
<li>Enter your organization’s Zero Trust domain (e.g., <code>yourorganization.cloudflareaccess.com</code>).</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Verify Connection</strong>:</p><ul>
<li>Confirm that the WARP client connects to your organization. The status should show “Connected.”</li>
</ul>
</li>
</ol>
<hr>
<h4 id="4-route-private-network-ips-through-warp"><strong>4. Route Private Network IPs Through WARP</strong></h4>
<p>Ensure WARP routes traffic destined for your private network.</p><ol>
<li><p><strong>Check Split Tunneling Configuration</strong>:</p><ul>
<li>By default, WARP excludes traffic bound for private IP ranges (RFC 1918). You need to include your private network range in the split tunneling configuration.</li>
</ul>
</li>
<li><p><strong>Add Your Network to Split Tunnels</strong>:</p><ul>
<li>Navigate to <strong>Settings</strong> → <strong>Network</strong> in the Zero Trust Dashboard.</li>
<li>If using <strong>Include Mode</strong>:<ul>
<li>Add your private network’s IP range (e.g., <code>10.1.0.0/16</code>).</li>
</ul>
</li>
<li>If using <strong>Exclude Mode</strong>:<ul>
<li>Remove the IP range corresponding to your private network.</li>
</ul>
</li>
</ul>
</li>
</ol>
<hr>
<h4 id="5-connect-as-a-user"><strong>5. Connect as a User</strong></h4>
<p>Once the WARP client is configured, use your RDP client to access the server.</p><ol>
<li><p><strong>Open RDP Client</strong>:</p><ul>
<li>For example, use <strong>Microsoft Remote Desktop</strong>.</li>
</ul>
</li>
<li><p><strong>Add a New Connection</strong>:</p><ul>
<li><strong>PC Name</strong>: Enter the private IP address of your RDP server (e.g., <code>10.1.15.150</code>).</li>
<li><strong>User Account</strong>: Enter your RDP credentials.</li>
</ul>
</li>
<li><p><strong>Test the Connection</strong>:</p><ul>
<li>Double-click the newly added PC.</li>
<li>Confirm the connection when prompted.</li>
<li>You should now be securely connected to the server as though you are on the same network.</li>
</ul>
</li>
</ol>
<hr>
<h3 id="additional-tips-and-best-practices"><strong>Additional Tips and Best Practices</strong></h3>
<ul>
<li><strong>DNS Resolution</strong>:<ul>
<li>If using hostnames instead of IPs, configure internal DNS resolution within Cloudflare Zero Trust.</li>
</ul>
</li>
<li><strong>Logging and Monitoring</strong>:<ul>
<li>Enable logs in the Zero Trust Dashboard to track user activity and troubleshoot issues.</li>
</ul>
</li>
<li><strong>Firewall Rules</strong>:<ul>
<li>Ensure your server firewall allows traffic from Cloudflare’s IP ranges.</li>
</ul>
</li>
</ul>
<hr>
<p><a href="https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/use-cases/rdp/">Cloudflare Guide</a></p><h3 id="conclusion"><strong>Conclusion</strong></h3>
<p>By combining Cloudflare Tunnel, Zero Trust access policies, and the WARP client, you can create a secure, scalable, and flexible solution for accessing RDP servers. This eliminates the need for exposing public IPs or relying on traditional VPNs, enhancing both security and user experience.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>api.cloud.tenda.com.cn debuging a router</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/apicloudtendacomcn-debuging-a-router/"/>
        <id>https://blog.ehmad.site/apicloudtendacomcn-debuging-a-router/</id>

        <updated>2024-11-28T09:53:48+05:00</updated>
            <summary>
                <![CDATA[
                    Tenda Listener - PHP Script This PHP script is designed to receive, display, and log HTTP requests sent to the server. It is particularly useful for debugging and inspecting the data sent by devices connecting to a Tenda router. Specifically, it can capture data sent&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h1 id="tenda-listener---php-script">Tenda Listener - PHP Script</h1>
<p>This <a href="https://github.com/mrxehmad/api.cloud.tenda.com.cn"> PHP script</a> is designed to receive, display, and log HTTP requests sent to the server. It is particularly useful for debugging and inspecting the data sent by devices connecting to a Tenda router. Specifically, it can capture data sent to <code>api.cloud.tenda.com.cn</code> by redirecting it to a local server.</p><hr>
<h2 id="features">Features</h2>
<ul>
<li>Displays received HTTP headers.</li>
<li>Captures and prints <code>GET</code> and <code>POST</code> request data.</li>
<li>Shows the raw body of the request (e.g., JSON, XML, or other formats).</li>
<li>Allows monitoring of data sent to <code>api.cloud.tenda.com.cn</code> when a new device connects to the router.</li>
</ul>
<hr>
<h2 id="installation">Installation</h2>
<h3 id="1-deploy-the-php-script">1. Deploy the PHP Script</h3>
<ol>
<li><p>Place the <code>index.php</code> file in the desired directory on your web server:</p><pre><code class="language-bash">sudo mkdir -p /var/www/html/tenda-listener
sudo nano /var/www/html/tenda-listener/index.php
</code></pre>
<p>Add the PHP script content as described in this repository.</p></li>
<li><p>Set proper ownership and permissions for the web directory:</p><pre><code class="language-bash">sudo chown -R www-data:www-data /var/www/html/tenda-listener
sudo chmod -R 755 /var/www/html/tenda-listener
</code></pre>
</li>
<li><p>Configure Nginx to serve the PHP script. Create a new site configuration file:</p><pre><code class="language-bash">sudo nano /etc/nginx/sites-available/tenda-listener
</code></pre>
<p>Add the following configuration:</p><pre><code class="language-nginx">server {
    listen 80;
    server_name 192.168.0.x;

    root /var/www/html/tenda-listener;
    index index.php;

    location / {
        try_files $uri /index.php;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock; # Adjust PHP version if necessary
    }
}
</code></pre>
</li>
<li><p>Enable the site:</p><pre><code class="language-bash">sudo ln -s /etc/nginx/sites-available/tenda-listener /etc/nginx/sites-enabled/
</code></pre>
</li>
<li><p>Test the configuration and reload Nginx:</p><pre><code class="language-bash">sudo nginx -t
sudo systemctl reload nginx
</code></pre>
</li>
</ol>
<hr>
<h3 id="2-configure-dns-request-forwarding">2. Configure DNS Request Forwarding</h3>
<p>To capture the data sent to <code>api.cloud.tenda.com.cn</code>, set up DNS request forwarding to redirect requests to your local server:</p><ol>
<li><p><strong>Modify the DNS Configuration on the Router:</strong></p><ul>
<li>Set up a DNS server (like Pi-hole or any DNS resolver) to resolve <code>api.cloud.tenda.com.cn</code> to your local server’s IP (<code>192.168.0.x</code>).</li>
<li>For example, if using Pi-hole:<ul>
<li>Navigate to <strong>Internet Settings</strong>.</li>
<li>Add a  dns to <code>192.168.0.x</code> (your dns server).
 <figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/15/dns_setting.png" alt="DNS Setting tenda router" width="990" height="1001"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/15/responsive/dns_setting-xs.webp 640w ,https://blog.ehmad.site/media/posts/15/responsive/dns_setting-sm.webp 768w ,https://blog.ehmad.site/media/posts/15/responsive/dns_setting-md.webp 1024w ,https://blog.ehmad.site/media/posts/15/responsive/dns_setting-lg.webp 1366w ,https://blog.ehmad.site/media/posts/15/responsive/dns_setting-xl.webp 1600w ,https://blog.ehmad.site/media/posts/15/responsive/dns_setting-2xl.webp 1920w"></figure></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Verify DNS Resolution:</strong>
Run the following command from a device on the same network:</p><pre><code class="language-bash">nslookup api.cloud.tenda.com.cn
</code></pre>
<p>It should return <code>192.168.0.x</code>.</p></li>
<li><p>Once configured, all traffic intended for <code>api.cloud.tenda.com.cn</code> will now be forwarded to your PHP listener.</p></li>
</ol>
<hr>
<h2 id="usage">Usage</h2>
<p>When a new device connects to the Tenda router, it sends data to <code>api.cloud.tenda.com.cn</code>. This data will be redirected to your PHP listener at <code>http://192.168.0.x</code>, where it can be inspected.</p><h3 id="viewing-data">Viewing Data</h3>
<ul>
<li>Open <code>http://192.168.0.x</code> in a browser to view incoming requests.</li>
<li>The page displays:<ol>
<li><strong>HTTP Headers</strong>: Headers sent with the request.</li>
<li><strong>GET/POST Data</strong>: Any data sent as query parameters or form data.</li>
<li><strong>Raw Body</strong>: The unprocessed body of the request, such as JSON or XML payloads.</li>
</ol>
</li>
</ul>
<hr>
<h2 id="sample-data-captured">Sample Data Captured</h2>
<p>Below is an example of data captured when a new device connects to the router:</p><h3 id="http-headers">HTTP Headers:</h3>
<pre><code>Array
(
    [Host] =&gt; api.cloud.tenda.com.cn
    [User-Agent] =&gt; TendaRouter/1.0
    [Content-Type] =&gt; application/json
    [Accept] =&gt; */*
)
</code></pre>
<h3 id="raw-input-data">Raw Input Data:</h3>
<pre><code class="language-json">{
    &quot;device_id&quot;: &quot;123456789&quot;,
    &quot;device_name&quot;: &quot;Smartphone&quot;,
    &quot;mac_address&quot;: &quot;AA:BB:CC:DD:EE:FF&quot;,
    &quot;connection_time&quot;: &quot;2024-10-31T10:00:00Z&quot;
}
</code></pre>
<p>This data shows the device ID, name, MAC address, and the connection timestamp.</p><hr>
<h2 id="notes">Notes</h2>
<ul>
<li>This script is for <strong>debugging purposes only</strong> and should not be exposed publicly without additional security measures.</li>
<li>Ensure the PHP version on your server supports the <code>getallheaders</code> function.</li>
<li>Use HTTPS for added security if exposing this listener outside your local network.</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>configure Nginx with a self-signed SSL certificate for a domain</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/configure-nginx-with-a-self-signed-ssl-certificate-for-a-domain/"/>
        <id>https://blog.ehmad.site/configure-nginx-with-a-self-signed-ssl-certificate-for-a-domain/</id>

        <updated>2024-11-25T19:39:13+05:00</updated>
            <summary>
                <![CDATA[
                    Here’s a step-by-step guide to configure Nginx with a self-signed SSL certificate for a domain, directing requests to a local service running on port 5006. First, you need to create a self-signed SSL certificate for the domain. You can use openssl to generate the certificate&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Here’s a step-by-step guide to configure Nginx with a self-signed SSL certificate for a domain, directing requests to a local service running on port <code>5006</code>.</p><h3 id="1-create-a-self-signed-ssl-certificate">1. Create a Self-Signed SSL Certificate</h3>
<p>First, you need to create a self-signed SSL certificate for the domain. You can use <code>openssl</code> to generate the certificate and private key.</p><ol>
<li><p><strong>Generate the SSL Certificate and Private Key:</strong></p><pre><code class="language-bash">sudo mkdir -p /etc/nginx/ssl
sudo openssl req -newkey rsa:2048 -nodes -keyout /etc/nginx/ssl/yourdomain.key -x509 -days 365 -out /etc/nginx/ssl/yourdomain.crt
</code></pre>
<p>Replace <code>yourdomain</code> with your actual domain name (e.g., <code>example.com</code>). During this command, you’ll be prompted to provide details for the certificate, such as Country Name, Organization, and so on. You can leave these fields blank if not required.</p></li>
</ol>
<h3 id="2-configure-nginx">2. Configure Nginx</h3>
<p>Now, configure Nginx to use the self-signed SSL certificate and to forward traffic to port <code>5006</code>.</p><ol>
<li><p><strong>Edit Nginx Configuration File:</strong></p><p>Open (or create) your domain configuration file in Nginx. Typically, it’s located in <code>/etc/nginx/sites-available/yourdomain</code>:</p><pre><code class="language-bash">sudo nano /etc/nginx/sites-available/yourdomain
</code></pre>
</li>
<li><p><strong>Add the SSL Configuration and Reverse Proxy Settings:</strong></p><p>Add the following configuration to the file:</p><pre><code class="language-nginx">server {
    listen 80;
    server_name yourdomain.com www.yourdomain.com;

    # Redirect all HTTP traffic to HTTPS
    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl;
    server_name yourdomain.com www.yourdomain.com;

    # SSL Certificate and Key
    ssl_certificate /etc/nginx/ssl/yourdomain.crt;
    ssl_certificate_key /etc/nginx/ssl/yourdomain.key;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Proxy Pass to Local Port 5006
    location / {
        proxy_pass http://127.0.0.1:5006;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
</code></pre>
<p>This configuration does the following:</p><ul>
<li>Redirects HTTP traffic to HTTPS.</li>
<li>Configures SSL on port <code>443</code> with the self-signed certificate.</li>
<li>Proxies all HTTPS requests to the local server on port <code>5006</code>.</li>
</ul>
</li>
<li><p><strong>Enable the Site Configuration:</strong></p><p>Link the configuration file from <code>sites-available</code> to <code>sites-enabled</code> to enable it:</p><pre><code class="language-bash">sudo ln -s /etc/nginx/sites-available/yourdomain /etc/nginx/sites-enabled/
</code></pre>
</li>
<li><p><strong>Test the Nginx Configuration:</strong></p><p>Test the configuration to ensure there are no syntax errors:</p><pre><code class="language-bash">sudo nginx -t
</code></pre>
</li>
<li><p><strong>Reload Nginx:</strong></p><p>If the test is successful, reload Nginx to apply the changes:</p><pre><code class="language-bash">sudo systemctl reload nginx
</code></pre>
</li>
</ol>
<h3 id="3-verify-the-setup">3. Verify the Setup</h3>
<ul>
<li>Visit <code>https://yourdomain.com</code> in your browser. You should see a warning because the certificate is self-signed.</li>
<li>You can proceed to the site, and the requests should be proxied to the service running on port <code>5006</code>.</li>
</ul>
<h3 id="notes">Notes:</h3>
<ul>
<li>To bypass the certificate warning, you’ll need to add the certificate as a trusted authority in your browser or use a Certificate Authority (CA) to get a trusted SSL certificate for production environments.</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>Create a simple seismograph with BMI160 6-DOF</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/create-a-simple-seismograph-with-bmi160-6-dof/"/>
        <id>https://blog.ehmad.site/create-a-simple-seismograph-with-bmi160-6-dof/</id>

        <updated>2024-11-22T17:39:15+05:00</updated>
            <summary>
                <![CDATA[
                    Using the BMI160 6-DOF (Degrees of Freedom) Accelerometer and Gyroscope Module is a much better option than a microphone for a DIY seismograph! The BMI160 has a 3-axis accelerometer and a 3-axis gyroscope, which allows it to detect minute changes in acceleration and orientation. With&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Using the <strong>BMI160 6-DOF (Degrees of Freedom) Accelerometer and Gyroscope Module</strong> is a much better option than a microphone for a DIY seismograph! The BMI160 has a 3-axis accelerometer and a 3-axis gyroscope, which allows it to detect minute changes in acceleration and orientation. With the ESP8266, you can create a simple seismograph that measures and logs tremors, vibrations, and even tilt changes with this setup.</p><h3 id="advantages-of-using-the-bmi160">Advantages of Using the BMI160</h3>
<ol>
<li><strong>High Sensitivity to Small Movements</strong>: It’s designed to detect subtle changes in acceleration and orientation, making it suitable for measuring vibrations.</li>
<li><strong>6 DOF (Degrees of Freedom)</strong>: With both accelerometer and gyroscope, it provides more comprehensive data than a microphone, allowing you to capture vibrations on three axes (X, Y, and Z).</li>
<li><strong>Low Power Consumption</strong>: The BMI160 is energy-efficient, which makes it ideal for continuous monitoring applications like a seismograph.</li>
</ol>
<h3 id="what-youll-need">What You’ll Need</h3>
<ol>
<li><strong>ESP8266</strong> (like NodeMCU or ESP-01)</li>
<li><strong>BMI160 6 DOF IMU Module</strong></li>
<li><strong>Breadboard and Jumper Wires</strong></li>
<li><strong>Optional</strong>: LED, Buzzer, or OLED display for alerts or real-time data</li>
</ol>
<h3 id="step-by-step-guide">Step-by-Step Guide</h3>
<h4 id="1-connecting-the-bmi160-to-the-esp8266">1. Connecting the BMI160 to the ESP8266</h4>
<p>The BMI160 typically uses <strong>I2C</strong> or <strong>SPI</strong> for communication. I2C is simpler, so we’ll go with that.</p><ul>
<li><strong>Connect VCC</strong> on the BMI160 to <strong>3.3V</strong> on the ESP8266.</li>
<li><strong>Connect GND</strong> on the BMI160 to <strong>GND</strong> on the ESP8266.</li>
<li><strong>Connect SDA</strong> on the BMI160 to <strong>D2</strong> on the ESP8266 (GPIO4).</li>
<li><strong>Connect SCL</strong> on the BMI160 to <strong>D1</strong> on the ESP8266 (GPIO5).</li>
</ul>
<h4 id="2-installing-required-libraries">2. Installing Required Libraries</h4>
<p>To use the BMI160, you can use the <strong>Adafruit BMI160 library</strong> in the Arduino IDE. Install this via the <strong>Library Manager</strong>:</p><ol>
<li>Go to <strong>Sketch &gt; Include Library &gt; Manage Libraries…</strong></li>
<li>Search for <code>Adafruit BMI160</code> and install it.</li>
</ol>
<h4 id="3-code-for-reading-accelerometer-data">3. Code for Reading Accelerometer Data</h4>
<p>Here’s a basic example of code to read the accelerometer values (acceleration in X, Y, Z axes) from the BMI160, which can then be used to detect vibrations:</p><pre><code class="language-cpp">#include &lt;Wire.h&gt;
#include &lt;Adafruit_Sensor.h&gt;
#include &lt;Adafruit_BMI160.h&gt;

Adafruit_BMI160 bmi160;

void setup() {
  Serial.begin(115200);

  // Initialize the BMI160 sensor
  if (!bmi160.begin(BMI160_I2C_ADDR, &amp;Wire)) {
    Serial.println(&quot;Could not find a valid BMI160 sensor, check wiring!&quot;);
    while (1);
  }

  bmi160.setAccelRange(BMI160_ACCELRANGE_2G);  // Set range to 2G for more sensitivity
}

void loop() {
  // Get accelerometer readings
  sensors_event_t accelEvent;
  bmi160.getEvent(&amp;accelEvent, NULL, NULL);

  float accelX = accelEvent.acceleration.x;  // Acceleration in X-axis
  float accelY = accelEvent.acceleration.y;  // Acceleration in Y-axis
  float accelZ = accelEvent.acceleration.z;  // Acceleration in Z-axis

  Serial.print(&quot;X: &quot;); Serial.print(accelX); Serial.print(&quot; m/s² &quot;);
  Serial.print(&quot;Y: &quot;); Serial.print(accelY); Serial.print(&quot; m/s² &quot;);
  Serial.print(&quot;Z: &quot;); Serial.print(accelZ); Serial.println(&quot; m/s²&quot;);

  // Threshold-based vibration detection
  float threshold = 0.1;  // Adjust threshold based on sensitivity
  if (abs(accelX) &gt; threshold || abs(accelY) &gt; threshold || abs(accelZ) &gt; threshold) {
    Serial.println(&quot;Vibration Detected!&quot;);
  }

  delay(50);  // Adjust sampling frequency as needed
}
</code></pre>
<h3 id="explanation-of-the-code">Explanation of the Code</h3>
<ul>
<li><strong>Initialize the BMI160</strong>: This checks the connection with the BMI160 and sets the accelerometer range (2G is the most sensitive, suitable for small vibrations).</li>
<li><strong>Read Acceleration</strong>: Reads acceleration in each axis (X, Y, Z). The values are in m/s² (meters per second squared).</li>
<li><strong>Threshold Detection</strong>: If any of the acceleration values exceed a set threshold (0.1 m/s² in this example), it logs a “Vibration Detected!” message. You can adjust this threshold based on your environment to avoid false positives.</li>
</ul>
<h4 id="4-optional-data-logging-or-real-time-visualization">4. Optional: Data Logging or Real-Time Visualization</h4>
<ul>
<li><strong>Logging Data</strong>: You can send the data over Wi-Fi (e.g., to a server or cloud service) for long-term monitoring.</li>
<li><strong>OLED Display</strong>: If you add a small OLED display, you can view real-time data on-site.</li>
<li><strong>Alerts</strong>: Connect an LED or buzzer to trigger whenever a vibration is detected.</li>
</ul>
<h4 id="5-fine-tuning-the-sensitivity">5. Fine-Tuning the Sensitivity</h4>
<p>You may need to experiment with:</p><ul>
<li><strong>Accelerometer Range</strong>: Setting it to <strong>2G</strong> gives more sensitivity to small vibrations, while <strong>4G</strong> or <strong>8G</strong> can capture more intense movements.</li>
<li><strong>Sampling Frequency</strong>: Increasing the sampling rate (by reducing <code>delay()</code> in <code>loop()</code>) allows for detecting fast, short vibrations.</li>
</ul>
<h4 id="limitations-and-notes">Limitations and Notes</h4>
<ul>
<li><strong>Vibration Resolution</strong>: The BMI160 has good resolution, but it’s not as sensitive as professional seismometers. However, it should be able to pick up noticeable tremors and vibrations.</li>
<li><strong>Noise Filtering</strong>: You can filter noise using a moving average or low-pass filter in code to reduce background noise and focus on specific vibrations.</li>
</ul>
<h3 id="conclusion">Conclusion</h3>
<p>This setup with the BMI160 and ESP8266 should give you a basic yet effective vibration-sensing system that behaves similarly to a simple seismograph. It can detect various vibrations and small movements and can be enhanced with Wi-Fi logging for remote monitoring.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setup a V2Ray server</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/setup-a-v2ray-server/"/>
        <id>https://blog.ehmad.site/setup-a-v2ray-server/</id>

        <updated>2024-11-20T18:17:04+05:00</updated>
            <summary>
                <![CDATA[
                    Setup a V2Ray server allows you to create a custom VPN or proxy server with advanced features such as multiple protocols, routing rules, and security measures. V2Ray is often used to bypass internet censorship, improve privacy, or enhance speed for certain applications. Below is a&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Setup a <strong>V2Ray server</strong> allows you to create a custom VPN or proxy server with advanced features such as multiple protocols, routing rules, and security measures. V2Ray is often used to bypass internet censorship, improve privacy, or enhance speed for certain applications. Below is a guide for setting up a V2Ray server on a VPS (e.g., on an Ubuntu server) and configuring it to run securely.</p><figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/12/v2ray-2.jpg" alt="Setup a V2Ray server" width="1600" height="900"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-xs.webp 640w ,https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-sm.webp 768w ,https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-md.webp 1024w ,https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-lg.webp 1366w ,https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-xl.webp 1600w ,https://blog.ehmad.site/media/posts/12/responsive/v2ray-2-2xl.webp 1920w"></figure><h3 id="prerequisites">Prerequisites</h3>
<ul>
<li>A VPS with a public IP address, running <strong>Ubuntu 18.04+</strong> or <strong>Debian 9+</strong>.</li>
<li>Basic knowledge of command-line operations.</li>
<li>A domain name (optional, but recommended for easier access and setting up TLS encryption).</li>
</ul>
<h3 id="step-1-update-and-install-necessary-packages">Step 1: Update and Install Necessary Packages</h3>
<p>Log into your server and update it:</p><pre><code class="language-bash">sudo apt update &amp;&amp; sudo apt upgrade -y
</code></pre>
<p>Install necessary packages:</p><pre><code class="language-bash">sudo apt install -y curl vim unzip
</code></pre>
<h3 id="step-2-install-v2ray">Step 2: Install V2Ray</h3>
<p>The official V2Ray team offers a script to simplify installation:</p><pre><code class="language-bash">bash &lt;(curl -L https://install.direct/go.sh)
</code></pre>
<p>This will:</p><ul>
<li>Download the latest version of V2Ray.</li>
<li>Install it to <code>/usr/local/bin/v2ray</code>.</li>
<li>Create necessary configuration directories (<code>/etc/v2ray</code>).</li>
<li>Set up systemd services.</li>
</ul>
<p>Once the script completes, V2Ray will be installed and ready to configure.</p><h3 id="step-3-configure-v2ray-server">Step 3: Configure V2Ray Server</h3>
<p>The main configuration file for V2Ray is located at <code>/etc/v2ray/config.json</code>. Here is a basic configuration for a V2Ray server using <strong>VMess protocol</strong> with WebSocket transport:</p><ol>
<li><p>Open the configuration file:</p><pre><code class="language-bash">sudo vim /etc/v2ray/config.json
</code></pre>
</li>
<li><p>Replace its contents with a simple configuration:</p><pre><code class="language-json">{
  &quot;inbounds&quot;: [
    {
      &quot;port&quot;: 443,
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;settings&quot;: {
        &quot;clients&quot;: [
          {
            &quot;id&quot;: &quot;YOUR_UUID&quot;,
            &quot;alterId&quot;: 64
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;wsSettings&quot;: {
          &quot;path&quot;: &quot;/v2ray&quot;
        }
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {}
    }
  ]
}
</code></pre>
<ul>
<li><p><strong>Replace <code>YOUR_UUID</code></strong> with a unique UUID for your client. Generate a UUID with:</p><pre><code class="language-bash">uuidgen
</code></pre>
</li>
<li><p><strong>Adjust the <code>port</code></strong> if 443 is already in use, or if you want to use a custom port.</p></li>
</ul>
</li>
</ol>
<h3 id="step-4-set-up-tls-optional-but-recommended">Step 4: Set Up TLS (Optional but Recommended)</h3>
<p>TLS encrypts your traffic, making it harder to detect or block.</p><ol>
<li><p><strong>Install Certbot</strong>:</p><pre><code class="language-bash">sudo apt install -y certbot
</code></pre>
</li>
<li><p><strong>Request a certificate</strong> for your domain:</p><pre><code class="language-bash">sudo certbot certonly --standalone -d yourdomain.com
</code></pre>
</li>
<li><p>Update the <code>config.json</code> to include TLS settings:</p><pre><code class="language-json">{
  &quot;inbounds&quot;: [
    {
      &quot;port&quot;: 443,
      &quot;protocol&quot;: &quot;vmess&quot;,
      &quot;settings&quot;: {
        &quot;clients&quot;: [
          {
            &quot;id&quot;: &quot;YOUR_UUID&quot;,
            &quot;alterId&quot;: 64
          }
        ]
      },
      &quot;streamSettings&quot;: {
        &quot;network&quot;: &quot;ws&quot;,
        &quot;security&quot;: &quot;tls&quot;,
        &quot;tlsSettings&quot;: {
          &quot;certificates&quot;: [
            {
              &quot;certificateFile&quot;: &quot;/etc/letsencrypt/live/yourdomain.com/fullchain.pem&quot;,
              &quot;keyFile&quot;: &quot;/etc/letsencrypt/live/yourdomain.com/privkey.pem&quot;
            }
          ]
        },
        &quot;wsSettings&quot;: {
          &quot;path&quot;: &quot;/v2ray&quot;
        }
      }
    }
  ],
  &quot;outbounds&quot;: [
    {
      &quot;protocol&quot;: &quot;freedom&quot;,
      &quot;settings&quot;: {}
    }
  ]
}
</code></pre>
</li>
<li><p>Restart V2Ray to apply the new settings:</p><pre><code class="language-bash">sudo systemctl restart v2ray
</code></pre>
</li>
</ol>
<h3 id="step-5-open-the-firewall-ports">Step 5: Open the Firewall Ports</h3>
<p>Ensure that your firewall allows traffic on the port you’ve chosen for V2Ray (443 in this example):</p><pre><code class="language-bash">sudo ufw allow 443/tcp
sudo ufw allow 443/udp
</code></pre>
<h3 id="step-6-configure-v2ray-client">Step 6: Configure V2Ray Client</h3>
<p>To connect to your server, you’ll need a V2Ray client app (e.g., V2RayN for Windows or Shadowrocket for iOS).</p><ol>
<li><p>In the client app, use these settings:</p><ul>
<li><strong>Address</strong>: <code>yourdomain.com</code> or server IP</li>
<li><strong>Port</strong>: <code>443</code></li>
<li><strong>UUID</strong>: The UUID you generated for <code>YOUR_UUID</code></li>
<li><strong>AlterID</strong>: <code>64</code></li>
<li><strong>Network</strong>: <code>WebSocket</code></li>
<li><strong>Path</strong>: <code>/v2ray</code></li>
<li><strong>TLS</strong>: Enable, if you’ve set up TLS.</li>
</ul>
</li>
<li><p>Save and connect.</p></li>
</ol>
<h3 id="step-7-start-and-enable-v2ray-service">Step 7: Start and Enable V2Ray Service</h3>
<p>Enable and start V2Ray as a service to keep it running:</p><pre><code class="language-bash">sudo systemctl enable v2ray
sudo systemctl start v2ray
</code></pre>
<h3 id="troubleshooting-tips">Troubleshooting Tips</h3>
<ul>
<li><strong>Logs</strong>: If V2Ray is not working, check the logs with:<pre><code class="language-bash">sudo journalctl -u v2ray -f
</code></pre>
</li>
<li><strong>Firewall</strong>: Double-check that the firewall settings match your V2Ray configuration.</li>
<li><strong>Config Validation</strong>: Use <code>jq</code> to validate <code>config.json</code> syntax:<pre><code class="language-bash">jq . /etc/v2ray/config.json
</code></pre>
</li>
</ul>
<p>You now have a working V2Ray server!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Setting Up a Secure and Optimized SearXNG Instance with Docker Compose</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/setting-up-a-secure-and-optimized-searxng-instance-with-docker-compose/"/>
        <id>https://blog.ehmad.site/setting-up-a-secure-and-optimized-searxng-instance-with-docker-compose/</id>

        <updated>2024-11-18T16:53:54+05:00</updated>
            <summary>
                <![CDATA[
                    If you’re looking to deploy a private instance of SearXNG—a powerful, open-source metasearch engine—using Docker Compose is one of the simplest and most efficient ways to do it. This guide explores the custom Docker Compose configuration for SearXNG, explains its benefits, and provides step-by-step instructions&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/11/0_wt6Gd9kkdlifAPKr.png" alt="Setting Up a Secure and Optimized SearXNG Instance with Docker Compose" width="512" height="505"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-xs.webp 640w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-sm.webp 768w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-md.webp 1024w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-lg.webp 1366w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-xl.webp 1600w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-2xl.webp 1920w"></figure><p>If you’re looking to deploy a private instance of SearXNG—a powerful, open-source metasearch engine—using Docker Compose is one of the simplest and most efficient ways to do it. This guide explores the custom Docker Compose configuration for SearXNG, explains its benefits, and provides step-by-step instructions for running it on your network.</p><h3 id="overview-of-the-docker-compose-configuration">Overview of the Docker Compose Configuration</h3>
<p>The following <code>docker-compose.yml</code> file has been designed to prioritize security, efficiency, and ease of management. It sets up SearXNG to run on port 80 of the host (mapped from port 8080 in the container), provides custom logging, and limits container privileges to only what’s necessary.</p><p>Here’s the complete Docker Compose configuration:</p><pre><code class="language-yaml">version: &quot;3.7&quot;

services:
  searxng:
    container_name: searxng
    image: docker.io/searxng/searxng:latest
    restart: unless-stopped
    ports:
      - &quot;80:8080&quot;
    volumes:
      - ./searxng:/etc/searxng:rw
    environment:
      - SEARXNG_BASE_URL=http://10.1.15.196/
      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}
      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    logging:
      driver: &quot;json-file&quot;
      options:
        max-size: &quot;1m&quot;
        max-file: &quot;1&quot;
</code></pre>
<h3 id="key-components-of-the-configuration">Key Components of the Configuration</h3>
<p>Let’s break down each part of this configuration file:</p><ul>
<li><strong>Container Name</strong>: Naming the container as <code>searxng</code> makes it easy to manage and identify in <code>docker ps</code> outputs.</li>
<li><strong>Image</strong>: Specifies the SearXNG Docker image (<code>docker.io/searxng/searxng:latest</code>), ensuring you’re using the latest version.</li>
<li><strong>Restart Policy</strong>: Automatically restarts the container if it fails, ensuring your SearXNG instance remains online without manual intervention.</li>
<li><strong>Ports</strong>: Maps port 80 on the host to port 8080 in the container, making SearXNG accessible at <code>http://10.1.15.196/</code>.</li>
<li><strong>Volumes</strong>: Mounts a local directory (<code>./searxng</code>) to <code>/etc/searxng</code> in the container, allowing persistent configuration storage and easy customization.</li>
<li><strong>Environment Variables</strong>:<ul>
<li><strong><code>SEARXNG_BASE_URL</code></strong>: Configures SearXNG’s base URL for local access at <code>http://10.1.15.196/</code>.</li>
<li><strong><code>UWSGI_WORKERS</code> and <code>UWSGI_THREADS</code></strong>: Dynamically set default values for <code>uwsgi</code> workers and threads, optimizing for available CPU and RAM.</li>
</ul>
</li>
<li><strong>Capabilities</strong>:<ul>
<li><strong><code>cap_drop</code> and <code>cap_add</code></strong>: Increases security by dropping all unnecessary capabilities and only allowing minimal privileges like <code>CHOWN</code>, <code>SETGID</code>, and <code>SETUID</code>.</li>
</ul>
</li>
<li><strong>Logging</strong>: Limits the size and number of log files with the <code>json-file</code> driver to avoid excessive disk usage.</li>
</ul>
<h3 id="benefits-of-this-configuration">Benefits of This Configuration</h3>
<ol>
<li><p><strong>Ease of Use and Deployment</strong>: Docker Compose simplifies deployment by combining all configurations into a single, easily manageable file. With this setup, starting or stopping your SearXNG instance only requires a single command.</p></li>
<li><p><strong>Security</strong>: </p><ul>
<li><strong>Minimal Capabilities</strong>: By dropping all capabilities except those essential for SearXNG, you limit the potential attack surface.</li>
<li><strong>Port Mapping</strong>: Exposing only the necessary port (80 on the host) helps secure access to SearXNG.</li>
</ul>
</li>
<li><p><strong>Efficiency and Performance</strong>:</p><ul>
<li><strong>Customizable Worker and Thread Settings</strong>: By using environment variables to set default values for <code>UWSGI_WORKERS</code> and <code>UWSGI_THREADS</code>, this configuration ensures that SearXNG can handle multiple requests efficiently without exhausting resources.</li>
<li><strong>Automatic Restart</strong>: With <code>restart: unless-stopped</code>, your SearXNG instance can recover automatically from failures, maintaining high uptime.</li>
</ul>
</li>
<li><p><strong>Log Management</strong>: Configuring the log rotation with <code>max-size</code> and <code>max-file</code> helps prevent log files from consuming excessive disk space. This keeps your environment clean and reduces the need for manual log maintenance.</p></li>
<li><p><strong>Customization Through Volumes</strong>: Mounting a local directory to <code>/etc/searxng</code> in the container allows you to customize and persist SearXNG’s configuration easily. Any changes made in the local <code>./searxng</code> directory will automatically update the configuration within the container, making it simple to apply updates.</p></li>
</ol>
<h3 id="how-to-run-this-docker-compose-configuration">How to Run This Docker Compose Configuration</h3>
<ol>
<li><p><strong>Save the Compose File</strong>: Create a file named <code>docker-compose.yml</code> with the above configuration.</p></li>
<li><p><strong>Create a Local Configuration Directory</strong>: Make a directory named <code>searxng</code> in the same location as the <code>docker-compose.yml</code> file. This directory will store your SearXNG configuration files, ensuring they persist between container restarts.</p><pre><code class="language-bash">mkdir searxng
</code></pre>
</li>
<li><p><strong>Start the Container</strong>: From the directory containing the <code>docker-compose.yml</code> file, run the following command to build and start your SearXNG instance:</p><pre><code class="language-bash">docker-compose up -d
</code></pre>
</li>
<li><p><strong>Access SearXNG</strong>: Once the container is running, open a web browser and navigate to <code>http://10.1.15.196/</code>. You should see the SearXNG search interface.</p></li>
<li><p><strong>Stop the Container</strong>: To stop the container, use the following command:</p><pre><code class="language-bash">docker-compose down
</code></pre>
</li>
</ol>
<h3 id="conclusion">Conclusion</h3>
<p>With this optimized Docker Compose configuration, you’re set up for a secure, efficient, and user-friendly SearXNG experience. This configuration balances security, performance, and simplicity, making it ideal for anyone looking to deploy their own private search engine.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Monitor the network traffic of a specific APP on Windows </title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/monitor-the-network-traffic-of-a-specific-app-on-windows/"/>
        <id>https://blog.ehmad.site/monitor-the-network-traffic-of-a-specific-app-on-windows/</id>

        <updated>2024-11-16T20:01:30+05:00</updated>
            <summary>
                <![CDATA[
                    To monitor the network traffic of a specific app on Windows using Wireshark, follow these steps: To filter traffic from a specific app, first identify the app’s PID (Process ID): Alternatively: netstat -ano | findstr :&lt;Port Number&gt; Replace &lt;Port Number&gt; with the specific port number&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>To monitor the network traffic of a specific app on Windows using <strong>Wireshark</strong>, follow these steps:</p><h3 id="1-install-wireshark-if-not-already-installed">1. <strong>Install Wireshark (if not already installed)</strong></h3>
<ul>
<li>Download and install Wireshark from <a href="https://www.wireshark.org/">wireshark.org</a>.</li>
<li>Make sure to also install <code>Npcap</code> during the installation, which is required for network capture.</li>
</ul>
<h3 id="2-identify-the-apps-process-id-pid">2. <strong>Identify the App’s Process ID (PID)</strong></h3>
<p>   To filter traffic from a specific app, first identify the app’s PID (Process ID):</p><ul>
<li>Open <strong>Task Manager</strong> by pressing <code>Ctrl + Shift + Esc</code> or right-clicking the taskbar and selecting <strong>Task Manager</strong>.</li>
<li>Go to the <strong>Details</strong> tab, find the app, and note the <strong>PID</strong>.</li>
</ul>
<p>   Alternatively:</p><ul>
<li>Use the <code>netstat</code> command in Command Prompt to list processes with network connections:<pre><code>netstat -ano | findstr :&lt;Port Number&gt;
</code></pre>
<ul>
<li>Replace <code>&lt;Port Number&gt;</code> with the specific port number if you know it.</li>
</ul>
</li>
</ul>
<h3 id="3-open-wireshark-and-select-network-interface">3. <strong>Open Wireshark and Select Network Interface</strong></h3>
<ul>
<li>Launch Wireshark and select the network interface connected to the internet (usually <code>Wi-Fi</code> or <code>Ethernet</code>).</li>
<li>Start capturing traffic by double-clicking the interface.</li>
</ul>
<h3 id="4-apply-a-filter-to-capture-traffic-of-the-specific-app">4. <strong>Apply a Filter to Capture Traffic of the Specific App</strong></h3>
<p>   Now, you can filter traffic based on the PID of the app.</p><ul>
<li>In the Wireshark <strong>Display Filter</strong> bar, use the following filter format:<pre><code>tcp.port == &lt;port_number&gt;
</code></pre>
Replace <code>&lt;port_number&gt;</code> with the port used by the application.</li>
</ul>
<p>   Or if you don’t know the port:</p><ul>
<li>Use the <strong>Capture Filter</strong> for IPs if you know the IP range of the traffic expected, or</li>
<li>To track down which traffic belongs to your app dynamically, you might need to manually inspect connections, then fine-tune your filter.</li>
</ul>
<h3 id="5-analyze-the-captured-packets">5. <strong>Analyze the Captured Packets</strong></h3>
<ul>
<li>Once you’ve filtered the packets to your application, analyze details like source and destination IPs, protocols, and data flow.</li>
<li>Stop the capture when you have enough data to review.</li>
</ul>
<h3 id="additional-tips">Additional Tips</h3>
<ul>
<li><strong>Use the <code>Process Monitor (ProcMon)</code></strong>: ProcMon can help to track which ports are opened by specific processes.</li>
<li><strong>Use Wireshark’s Protocol Hierarchy and Statistics</strong>: To understand traffic types used by the app.
<figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/10/Screenshot-2024-11-16-200027.png" alt="Monitor the network traffic of a specific APP on Windows" width="1920" height="1080"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-xs.webp 640w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-sm.webp 768w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-md.webp 1024w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-lg.webp 1366w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-xl.webp 1600w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-2xl.webp 1920w"></figure>
This should give you insights into your app’s network activity specifically.</li>
</ul>

            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Mount a WebDAV Server as a Network Drive in Windows 10</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/how-to-mount-a-webdav-server-as-a-network-drive-in-windows-10/"/>
        <id>https://blog.ehmad.site/how-to-mount-a-webdav-server-as-a-network-drive-in-windows-10/</id>

        <updated>2024-11-15T12:24:15+05:00</updated>
            <summary>
                <![CDATA[
                    Introduction Mapping a WebDAV server to a drive letter in Windows 10 allows for seamless file access, making it feel just like a local drive. This guide will walk you through the steps to connect your WebDAV server at https://example.com/webdev as a network drive in&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h3 id="introduction">Introduction</h3>
<p>Mapping a WebDAV server to a drive letter in Windows 10 allows for seamless file access, making it feel just like a local drive. This guide will walk you through the steps to connect your WebDAV server at <code>https://example.com/webdev</code> as a network drive in Windows 10, allowing easy drag-and-drop functionality for managing files.</p><h3 id="prerequisites">Prerequisites</h3>
<p>Before we begin, ensure you have:</p><ul>
<li>The WebDAV server URL (<code>https://example.com/webdev</code>).</li>
<li>Credentials (username and password) for accessing the WebDAV server.</li>
</ul>
<h3 id="step-1-open-file-explorer">Step 1: Open File Explorer</h3>
<p>Start by opening <strong>File Explorer</strong> on your Windows 10 computer. You can do this quickly by pressing <strong>Windows + E</strong> on your keyboard.</p><h3 id="step-2-navigate-to-this-pc">Step 2: Navigate to “This PC”</h3>
<p>In File Explorer, click on <strong>This PC</strong> in the left sidebar. This is where we’ll add the WebDAV server as a network drive.</p><h3 id="step-3-map-network-drive">Step 3: Map Network Drive</h3>
<ol>
<li>In the <strong>This PC</strong> window, go to the top menu and select <strong>Computer</strong>.</li>
<li>Click on <strong>Map network drive</strong> from the dropdown menu. This will open the Map Network Drive wizard.</li>
</ol>
<h3 id="step-4-choose-a-drive-letter">Step 4: Choose a Drive Letter</h3>
<p>In the Map Network Drive wizard:</p><ul>
<li><strong>Drive</strong>: Choose an available drive letter for the WebDAV server (e.g., <code>Z:</code>).</li>
</ul>
<p>Choosing a memorable drive letter will make it easy to find later.</p><h3 id="step-5-enter-the-webdav-url">Step 5: Enter the WebDAV URL</h3>
<p>In the <strong>Folder</strong> field, enter your WebDAV server URL:  </p><pre><code>https://example.com/webdev
</code></pre>
<h3 id="step-6-connect-using-different-credentials">Step 6: Connect Using Different Credentials</h3>
<p>Check the box labeled <strong>Connect using different credentials</strong>. This is important if your WebDAV server requires a username and password for access.</p><h3 id="step-7-finish-and-authenticate">Step 7: Finish and Authenticate</h3>
<ol>
<li>Click <strong>Finish</strong> to complete the setup.</li>
<li>A prompt will appear, asking you to enter your <strong>username</strong> and <strong>password</strong> for the WebDAV server. Input your credentials.</li>
<li>Optionally, check <strong>Remember my credentials</strong> if you want Windows to save this information for future connections.</li>
</ol>
<h3 id="step-8-verify-the-connection">Step 8: Verify the Connection</h3>
<p>If the connection is successful, the WebDAV folder will be accessible as a network drive in <strong>This PC</strong> under the drive letter you selected. You can now access the WebDAV server directly from File Explorer, just like any other folder on your computer.</p><figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/9/rtaImage.jpeg" alt="How to Mount a WebDAV Server as a Network Drive in Windows 10" width="1047" height="606"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/9/responsive/rtaImage-xs.webp 640w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-sm.webp 768w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-md.webp 1024w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-lg.webp 1366w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-xl.webp 1600w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-2xl.webp 1920w"></figure><h3 id="troubleshooting-common-issues">Troubleshooting Common Issues</h3>
<p>If you encounter any problems connecting, here are a few solutions to try:</p><ul>
<li><p><strong>WebDAV Client Compatibility</strong>: Windows’ built-in WebDAV client may not work with all servers. If you have connection issues, consider using a third-party client like <strong>Cyberduck</strong> or <strong>WinSCP</strong>.</p></li>
<li><p><strong>Firewall or Antivirus Interference</strong>: Occasionally, firewall or antivirus settings may block WebDAV connections. Temporarily disable them to see if that resolves the issue.</p></li>
<li><p><strong>Ensure HTTPS Compatibility</strong>: If your WebDAV server only supports HTTP, replace <code>https://</code> with <code>http://</code> in the URL. However, HTTPS is recommended for security.</p></li>
</ul>
<hr>
<h3 id="conclusion">Conclusion</h3>
<p>Mapping a WebDAV server to a network drive in Windows 10 offers the convenience of cloud storage with the familiarity of a local drive. Now, you can manage files on your WebDAV server just as you would on any other drive. Enjoy the streamlined workflow and easy access to your files!</p><p>Let us know if you need help troubleshooting any issues or have questions about WebDAV setup on other platforms!</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Use ADB Wirelessly Over Wi-Fi</title>
        <author>
            <name>Ehmad</name>
        </author>
        <link href="https://blog.ehmad.site/how-to-use-adb-wirelessly-over-wi-fi/"/>
        <id>https://blog.ehmad.site/how-to-use-adb-wirelessly-over-wi-fi/</id>

        <updated>2024-11-14T12:08:13+05:00</updated>
            <summary>
                <![CDATA[
                    To use ADB (Android Debug Bridge) wirelessly, you’ll need to connect your Android device and your computer over the same Wi-Fi network. Here are the steps to do this: adb devices Your device should appear in the list. 3. Enable ADB over TCP/IP Run this&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>To use ADB (Android Debug Bridge) wirelessly, you’ll need to connect your Android device and your computer over the same Wi-Fi network. Here are the steps to do this:</p><h3 id="1-connect-your-device-via-usb-first">1. Connect your device via USB first</h3>
<ul>
<li>Start by connecting your Android device to your computer with a USB cable.</li>
<li>Ensure you have <strong>USB debugging</strong> enabled on your device. You can enable this by going to:<ul>
<li><strong>Settings</strong> &gt; <strong>About Phone</strong> &gt; <strong>Build Number</strong> (tap 7 times to enable Developer Options).</li>
<li>Then go to <strong>Developer Options</strong> &gt; <strong>USB Debugging</strong>.</li>
</ul>
</li>
</ul>
<figure class="post__image"><img loading="lazy" src="https://blog.ehmad.site/media/posts/8/adb_wifi-wireless_debugging.png" alt="Use ADB Wirelessly Over Wi-Fi" width="365" height="675"  sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-xs.webp 640w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-sm.webp 768w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-md.webp 1024w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-lg.webp 1366w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-xl.webp 1600w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-2xl.webp 1920w"></figure><h3 id="2-open-a-terminal-or-command-prompt-on-your-computer">2. Open a terminal or command prompt on your computer</h3>
<ul>
<li>Open the Command Prompt (Windows) or Terminal (Mac/Linux) where ADB is installed.</li>
<li>Type the following command to ensure your device is recognized:<pre><code class="language-bash">adb devices
</code></pre>
Your device should appear in the list.</li>
</ul>
<h3 id="3-enable-adb-over-tcpip">3. Enable ADB over TCP/IP</h3>
<ul>
<li>Run this command to switch ADB to TCP/IP mode:<pre><code class="language-bash">adb tcpip 5555
</code></pre>
This sets ADB to listen for connections on port 5555.</li>
</ul>
<h3 id="4-find-your-devices-ip-address">4. Find your device’s IP address</h3>
<ul>
<li>On your Android device, go to <strong>Settings</strong> &gt; <strong>About Phone</strong> &gt; <strong>Status</strong> &gt; <strong>IP address</strong> (or similar path, depending on the device).</li>
<li>Note down the IP address (e.g., <code>192.168.1.5</code>).</li>
</ul>
<h3 id="5-connect-to-your-device-wirelessly">5. Connect to your device wirelessly</h3>
<ul>
<li>Run the following command using your device’s IP address:<pre><code class="language-bash">adb connect 192.168.1.5:5555
</code></pre>
</li>
<li>Replace <code>192.168.1.5</code> with the actual IP address of your device.</li>
</ul>
<h3 id="6-disconnect-the-usb-cable">6. Disconnect the USB cable</h3>
<ul>
<li>Now you can disconnect the USB cable. Your ADB connection should remain active over Wi-Fi.</li>
<li>Verify the connection by running:<pre><code class="language-bash">adb devices
</code></pre>
You should see your device listed with the IP address instead of a USB ID.</li>
</ul>
<h3 id="7-use-adb-commands-wirelessly">7. Use ADB commands wirelessly</h3>
<p>Now you can run any ADB command wirelessly as long as your computer and the Android device remain on the same Wi-Fi network.</p>
            ]]>
        </content>
    </entry>
</feed>
