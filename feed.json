{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ehmi",
    "description": "",
    "home_page_url": "https://blog.ehmad.site",
    "feed_url": "https://blog.ehmad.site/feed.json",
    "user_comment": "",
    "icon": "https://blog.ehmad.site/media/website/ehmi.png",
    "author": {
        "name": "Ehmad"
    },
    "items": [
        {
            "id": "https://blog.ehmad.site/follow-up-solution-for-ssl-error-err_ssl_unrecognized_name_alert-in-local/",
            "url": "https://blog.ehmad.site/follow-up-solution-for-ssl-error-err_ssl_unrecognized_name_alert-in-local/",
            "title": "Follow-Up: Solution for SSL Error &quot;ERR_SSL_UNRECOGNIZED_NAME_ALERT&quot; in Local",
            "summary": "SSL Error “ERR_SSL_UNRECOGNIZED_NAME_ALERT” in Local Networks Using Cloudflare Tunnels In a previous article, I discussed the issue of intermittent SSL error “ERR_SSL_UNRECOGNIZED_NAME_ALERT” when using Cloudflare tunnels in local networks and explored possible solutions. However, the methods suggested did not completely resolve the issue. Thanks to&hellip;",
            "content_html": "<h3 id=\"ssl-error-err_ssl_unrecognized_name_alert-------------in-local-networks-using-cloudflare-tunnels\">SSL Error “ERR_SSL_UNRECOGNIZED_NAME_ALERT”             in Local Networks Using Cloudflare Tunnels</h3>\n<p>In a previous article, I discussed the issue of intermittent SSL error “ERR_SSL_UNRECOGNIZED_NAME_ALERT” when using Cloudflare tunnels in local networks and explored possible solutions. However, the methods suggested did not completely resolve the issue. Thanks to a detailed analysis and solution provided by <a href=\"https://github.com/dasunsrule32\">@dasunsrule32</a> on a <a href=\"https://github.com/NginxProxyManager/nginx-proxy-manager/issues/3982#issuecomment-2408597306\">GitHub issue</a>, we now have a much better fix that ensures seamless connectivity without breaking HTTPS queries.</p><h2 id=\"understanding-the-root-cause\"><strong>Understanding the Root Cause</strong></h2>\n<p>The issue stems from modern browsers prioritizing <code>HTTPS</code> records with <code>ipv4hint</code> and <code>ipv6hint</code> when resolving domains. These records, deployed by Cloudflare, Google, and other major providers, speed up DNS resolution but can cause conflicts in local networks when using Pi-hole or custom DNS configurations.</p><p>Previously, many users (myself included) attempted workarounds like disabling IPv6, modifying local DNS configurations, or relying on the default Pi-hole settings. However, these solutions were either incomplete or required manual intervention on client devices.</p><h2 id=\"the-improved-solution\"><strong>The Improved Solution</strong></h2>\n<p><a href=\"https://github.com/dasunsrule32\">@dasunsrule32</a> provided a better approach that ensures Pi-hole properly handles these HTTPS record queries without breaking other services. The key fix is to <strong>block <code>HTTPS</code> record lookups for specific domains while keeping normal DNS functionality intact.</strong></p><h3 id=\"implementation-steps-in-pi-hole\"><strong>Implementation Steps in Pi-hole</strong></h3>\n<ol>\n<li><strong>Create a custom DNS configuration file</strong> for Pi-hole:<pre><code class=\"language-sh\">sudo nano /etc/dnsmasq.d/02-custom-dns.conf\n</code></pre>\n</li>\n</ol>\n<p>(Optional) maybe, becouse it didn’t work for me. Maybe works for you, Please let me know if it works. </p><ol start=\"2\">\n<li><p><strong>Add the following line to force Pi-hole to resolve the domain locally:</strong></p><pre><code>address=/pihole.domain.com/10.1.15.103\n</code></pre>\n<p>This ensures that <code>pihole.domain.com</code> resolves correctly within the network.</p></li>\n<li><p><strong>Block HTTPS record queries for subdomains of <code>domain.com</code></strong> using a regex filter:</p><p>Open the Pi-hole web interface and go to <strong>Domains</strong>, then add the following regex filter:</p><pre><code>^.*\\.domain\\.com$;querytype=HTTPS\n</code></pre>\n<p>This prevents browsers from prioritizing Cloudflare’s <code>HTTPS</code> records while allowing normal A/AAAA queries.</p></li>\n<li><p><strong>Restart Pi-hole to apply the changes:</strong></p><pre><code class=\"language-sh\">pihole restartdns\n</code></pre>\n</li>\n</ol>\n<h2 id=\"verifying-the-fix\"><strong>Verifying the Fix</strong></h2>\n<p>To ensure the changes are working, you can use <code>dig</code> to check whether Pi-hole is correctly handling DNS requests:</p><pre><code class=\"language-sh\">dig HTTPS pihole.domain.com @10.1.15.103\n</code></pre>\n<p>If the output no longer contains an <code>HTTPS</code> record response, the fix is correctly applied.</p><h2 id=\"final-thoughts\"><strong>Final Thoughts</strong></h2>\n<p>This solution effectively prevents SSL errors without requiring changes on client devices. Unlike previous workarounds, it ensures that local DNS remains functional while overriding problematic <code>HTTPS</code> records. Huge thanks to <a href=\"https://github.com/dasunsrule32\">@dasunsrule32</a> for their detailed debugging and contribution to the solution.</p><p>If you previously struggled with SSL errors in Cloudflare tunnels, I highly recommend implementing this fix. For further discussion or improvements, check out the <a href=\"https://github.com/NginxProxyManager/nginx-proxy-manager/issues/3982#issuecomment-2408597306\">GitHub issue thread</a>. Let me know in the comments if you have any questions or additional insights!</p><hr>\n<h3 id=\"related-reading\"><strong>Related Reading:</strong></h3>\n<ul>\n<li><a href=\"https://blog.ehmad.site/how-to-fix-intermittent-ssl-errors-in-local-networks-when-using-cloudflare-tunnels/\">My Previous Article on Fixing Intermittent SSL Errors</a></li>\n</ul>\n",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-03-09T16:47:39+05:00",
            "date_modified": "2025-03-09T16:50:50+05:00"
        },
        {
            "id": "https://blog.ehmad.site/how-to-fix-intermittent-ssl-errors-in-local-networks-when-using-cloudflare-tunnels/",
            "url": "https://blog.ehmad.site/how-to-fix-intermittent-ssl-errors-in-local-networks-when-using-cloudflare-tunnels/",
            "title": "How to Fix Intermittent SSL Errors in Local Networks When Using Cloudflare Tunnels Not Working :/ ",
            "summary": "If you’re hosting a service on your local network and using Cloudflare tunnels for external access, you might encounter intermittent SSL errors like ssl_error_unrecognized_name_alert when accessing your site locally. This issue arises due to DNS resolution inconsistencies or certificate mismatches between your local server and&hellip;",
            "content_html": "<p>If you’re hosting a service on your local network and using Cloudflare tunnels for external access, you might encounter intermittent SSL errors like <code>ssl_error_unrecognized_name_alert</code> when accessing your site locally. This issue arises due to DNS resolution inconsistencies or certificate mismatches between your local server and Cloudflare’s CDN. In this article, we’ll explore the root cause of the problem and provide a comprehensive solution. This journey made me cry fr.</p><hr>\n<h2 id=\"the-problem-why-does-this-happen\"><strong>The Problem: Why Does This Happen?</strong></h2>\n<p>When you host a service (e.g., a website) on your local network and use Cloudflare tunnels for external access, there are two distinct paths for traffic:</p><ol>\n<li><p><strong>Local Network Traffic</strong>:</p><ul>\n<li>Clients within the local network should resolve the domain (e.g., <code>pihole.example.com</code>) to the internal IP address of your server (e.g., <code>192.168.1.100</code>).</li>\n<li>The local server serves an SSL certificate issued by Let’s Encrypt for <code>*.example.com</code>.</li>\n</ul>\n</li>\n<li><p><strong>External Network Traffic</strong>:</p><ul>\n<li>Clients outside the local network resolve the domain to Cloudflare’s external IP (e.g., <code>104.x.x.x</code>).</li>\n<li>Cloudflare serves its own SSL certificate for <code>example.com</code>.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"why-do-ssl-errors-occur-locally\"><strong>Why Do SSL Errors Occur Locally?</strong></h3>\n<ul>\n<li><strong>DNS Resolution Fluctuations</strong>: If your local DNS resolver (e.g., Pi-hole) intermittently resolves the domain to the external IP instead of the internal IP, the request routes through Cloudflare. Cloudflare’s certificate does not match the subdomain (<code>pihole.example.com</code>), causing an SSL error.</li>\n<li><strong>SNI Misconfiguration</strong>: Some clients or devices may not send the correct Server Name Indication (SNI) header, leading the server to default to an incorrect certificate.</li>\n</ul>\n<hr>\n<h2 id=\"solution-how-to-fix-the-issue\"><strong>Solution: How to Fix the Issue</strong></h2>\n<p>To resolve the problem, you need to ensure consistent DNS resolution and proper SSL certificate handling for local clients. Follow these steps:</p><hr>\n<h3 id=\"step-1-configure-split-horizon-dns-in-pi-hole\"><strong>Step 1: Configure Split-Horizon DNS in Pi-hole</strong></h3>\n<p>Split-horizon DNS ensures that local clients resolve the domain to the internal IP address while external clients resolve it to the external IP.</p><ol>\n<li><p><strong>Add Local DNS Records</strong>:</p><ul>\n<li>Go to <strong>Pi-hole &gt; Local DNS &gt; DNS Records</strong>.</li>\n<li>Add a wildcard entry for your domain:<pre><code>Domain: *.example.com\nIP: 192.168.1.100\n</code></pre>\n</li>\n<li>Save the configuration.</li>\n</ul>\n</li>\n<li><p><strong>Disable Upstream Forwarding</strong>:</p><ul>\n<li>Navigate to <strong>Pi-hole &gt; Settings &gt; DNS</strong>.</li>\n<li>Under <strong>“Never forward the following domains”</strong>, add:<pre><code>example.com\n</code></pre>\n</li>\n<li>Save the settings to prevent Pi-hole from querying external DNS servers for this domain.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"step-2-verify-web-server-configuration\"><strong>Step 2: Verify Web Server Configuration</strong></h3>\n<p>Ensure your web server (e.g., Nginx or Apache) is properly configured to handle requests for the subdomain (<code>pihole.example.com</code>).</p><h4 id=\"for-nginx\"><strong>For Nginx</strong>:</h4>\n<pre><code class=\"language-nginx\">server {\n    listen 443 ssl;\n    server_name pihole.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    # Other SSL settings...\n}\n</code></pre>\n<h4 id=\"for-apache\"><strong>For Apache</strong>:</h4>\n<pre><code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n    ServerName pihole.example.com\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n\n    # Other SSL settings...\n&lt;/VirtualHost&gt;\n</code></pre>\n<hr>\n<h3 id=\"step-3-test-dns-resolution\"><strong>Step 3: Test DNS Resolution</strong></h3>\n<p>After configuring Pi-hole, verify that the domain resolves correctly to the internal IP:</p><pre><code class=\"language-bash\">nslookup pihole.example.com 192.168.1.100\n</code></pre>\n<p>The output should return:</p><pre><code>Address: 192.168.1.100\n</code></pre>\n<p>If it returns the external IP (e.g., <code>104.21.50.106</code>), revisit your Pi-hole configuration to ensure split-horizon DNS is working as expected.</p><hr>\n<h3 id=\"step-4-clear-client-side-caches\"><strong>Step 4: Clear Client-Side Caches</strong></h3>\n<p>Sometimes, old DNS records or browser caches can cause issues. Clear them as follows:</p><h4 id=\"clear-dns-cache\"><strong>Clear DNS Cache</strong>:</h4>\n<pre><code class=\"language-bash\"># Windows\nipconfig /flushdns\n\n# Linux/macOS\nsudo systemd-resolve --flush-caches\n</code></pre>\n<h4 id=\"clear-browser-cache\"><strong>Clear Browser Cache</strong>:</h4>\n<p>Use incognito mode or manually clear your browser’s cache.</p><hr>\n<h3 id=\"step-5-test-ssl-handshake\"><strong>Step 5: Test SSL Handshake</strong></h3>\n<p>Finally, test the SSL handshake to confirm that the correct certificate is being served:</p><pre><code class=\"language-bash\">openssl s_client -connect 192.168.1.100:443 -servername pihole.example.com\n</code></pre>\n<p>Look for the following in the output:</p><ul>\n<li><strong>Subject</strong>: <code>CN = *.example.com</code></li>\n<li><strong>Issuer</strong>: <code>C = US, O = Let&#39;s Encrypt, CN = E6</code></li>\n</ul>\n<p>If the certificate matches, your setup is correct.</p><hr>\n<p>Yes, that’s correct! If you’re using Cloudflare for external access and also want to serve your domains locally within your network, it’s important to ensure that <strong>all domains managed by Cloudflare</strong> (including the main domain and its subdomains) are properly forwarded to your local server and have valid SSL certificates issued by Let’s Encrypt. This ensures consistent behavior for both local and external traffic.</p><p>Here’s a detailed explanation of why this is necessary and how to implement it:</p><hr>\n<h2 id=\"why-should-all-domains-managed-by-cloudflare-be-forwarded-locally\"><strong>Why Should All Domains Managed by Cloudflare Be Forwarded Locally?</strong></h2>\n<ol>\n<li><p><strong>Consistent DNS Resolution</strong>:</p><ul>\n<li>When a domain or subdomain is managed by Cloudflare, external clients resolve it to Cloudflare’s IP addresses. However, local clients should resolve it to your internal server’s IP address (e.g., <code>192.168.1.100</code>).</li>\n<li>Without proper local DNS forwarding, local clients might inadvertently resolve the domain to Cloudflare’s external IP, causing SSL mismatches or routing issues.</li>\n</ul>\n</li>\n<li><p><strong>Avoid Certificate Mismatches</strong>:</p><ul>\n<li>Cloudflare serves its own SSL certificate for domains it manages. If a local client resolves a domain to Cloudflare’s external IP, the certificate presented will not match the local server’s configuration.</li>\n<li>By forwarding all domains locally and using Let’s Encrypt certificates on your local server, you ensure that local clients always receive the correct certificate.</li>\n</ul>\n</li>\n<li><p><strong>Performance and Reliability</strong>:</p><ul>\n<li>Routing local traffic through Cloudflare introduces unnecessary latency and dependency on external services. By resolving domains locally, you improve performance and reduce reliance on external infrastructure.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"forward-main-domain-and-sub-domain-locally-and-secure-them-with-lets-encrypt\"><strong>Forward Main Domain and Sub Domain Locally and Secure Them with Let’s Encrypt</strong></h2>\n<h3 id=\"step-1-add-local-dns-records-for-all-domains\"><strong>Step 1: Add Local DNS Records for All Domains</strong></h3>\n<p>In Pi-hole, configure split-horizon DNS to ensure all domains and subdomains resolve to your local server’s IP address.</p><ol>\n<li><p>Go to <strong>Pi-hole &gt; Local DNS &gt; DNS Records</strong>.</p></li>\n<li><p>Add entries for your main domain and subdomains:</p><pre><code>Domain: example.com\nIP: 192.168.1.100\n\nDomain: *.example.com\nIP: 192.168.1.100\n</code></pre>\n<ul>\n<li>The wildcard entry (<code>*.example.com</code>) ensures that all subdomains (e.g., <code>pihole.example.com</code>, <code>www.example.com</code>) resolve locally.(pihle local dns doens’t support wildcards. You have to add each domain manually )</li>\n</ul>\n</li>\n<li><p>Save the configuration.</p></li>\n</ol>\n<hr>\n<h3 id=\"step-2-disable-upstream-forwarding-for-all-domains-optional\"><strong>Step 2: Disable Upstream Forwarding for All Domains (Optional)</strong></h3>\n<p>Prevent Pi-hole from querying external DNS servers for your domains.</p><ol>\n<li>Navigate to <strong>Pi-hole &gt; Domains</strong>.</li>\n<li>Under <strong>“Add Wildcard Regex blocklist”</strong>, add:<pre><code>*.example.com\n</code></pre>\n</li>\n<li>Save the settings.</li>\n</ol>\n<hr>\n<h3 id=\"step-3-obtain-lets-encrypt-certificates-for-all-domains-google-it-if-you-dont-have\"><strong>Step 3: Obtain Let’s Encrypt Certificates for All Domains (Google it if you don’t have)</strong></h3>\n<h3 id=\"step-4-test-your-configuration\"><strong>Step 4: Test Your Configuration</strong></h3>\n<p>After setting up DNS and SSL, test the following:</p><ol>\n<li><p><strong>DNS Resolution</strong>:</p><pre><code class=\"language-bash\">nslookup example.com 192.168.1.100\nnslookup pihole.example.com 192.168.1.100\n</code></pre>\n<ul>\n<li>Both should return <code>192.168.1.100</code>.</li>\n</ul>\n</li>\n<li><p><strong>SSL Handshake</strong>:</p><pre><code class=\"language-bash\">openssl s_client -connect 192.168.1.100:443 -servername pihole.example.com\n</code></pre>\n<ul>\n<li>Verify that the certificate matches <code>*.example.com</code>.</li>\n</ul>\n</li>\n<li><p><strong>Browser Access</strong>:</p><ul>\n<li>Open <code>https://pihole.example.com</code> in a browser and confirm that the site loads without SSL errors.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"key-points-to-remember\"><strong>Key Points to Remember</strong></h2>\n<ol>\n<li><p><strong>All Domains Must Resolve Locally</strong>:</p><ul>\n<li>Ensure that both the main domain (<code>example.com</code>) and all subdomains  resolve to your local server’s IP address.</li>\n</ul>\n</li>\n<li><p><strong>Use Let’s Encrypt for Local SSL</strong>:</p><ul>\n<li>Let’s Encrypt certificates are free, widely trusted, and easy to renew. They ensure that local clients receive valid SSL certificates.</li>\n</ul>\n</li>\n<li><p><strong>Avoid External Dependencies</strong>:</p><ul>\n<li>By resolving domains locally, you eliminate the need for local traffic to pass through Cloudflare, improving performance and reliability.</li>\n</ul>\n</li>\n<li><p><strong>Monitor Logs</strong>:</p><ul>\n<li>Regularly check your web server logs and Pi-hole logs to ensure everything is functioning as expected.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"conclusion\"><strong>Conclusion</strong></h2>\n<p>When using Cloudflare for external access, it’s crucial to configure your local network to handle all domains and subdomains internally. By forwarding all domains to your local server, disabling upstream DNS forwarding, and securing them with Let’s Encrypt certificates, you can ensure seamless and secure access for both local and external clients.</p><p>This approach eliminates intermittent SSL errors, improves performance, and provides a consistent user experience across your network. If you follow these steps, your setup will be robust and reliable for all users.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-03-08T17:57:57+05:00",
            "date_modified": "2025-03-09T16:48:30+05:00"
        },
        {
            "id": "https://blog.ehmad.site/fixing-pushrejectederror-in-publii-cms-while-syncing-with-github/",
            "url": "https://blog.ehmad.site/fixing-pushrejectederror-in-publii-cms-while-syncing-with-github/",
            "title": "Fixing PushRejectedError in Publii CMS While Syncing with GitHub",
            "summary": "Issue Overview When using Publii CMS to sync a site to GitHub, you may encounter this error: ERROR: PushRejectedError: Push rejected because it was not a simple fast-forward. Use &quot;force: true&quot; to override. This happens because Publii tries to push changes to the blog branch,&hellip;",
            "content_html": "<h2 id=\"issue-overview\"><strong>Issue Overview</strong></h2>\n<p>When using <strong>Publii CMS</strong> to sync a site to GitHub, you may encounter this error:</p><pre><code>ERROR: PushRejectedError: Push rejected because it was not a simple fast-forward. Use &quot;force: true&quot; to override.\n</code></pre>\n<p>This happens because <strong>Publii tries to push changes to the <code>blog</code> branch</strong>, but GitHub has a newer version of that branch (with the Azure workflow file). Since Publii does not pull before pushing, Git rejects the push.</p><p>If you <strong>force push</strong>, you risk overwriting and deleting important files, such as your <strong>GitHub Actions workflow</strong> that automates deployments to Azure.</p><h2 id=\"solution-pull-changes-before-syncing\"><strong>Solution: Pull Changes Before Syncing</strong></h2>\n<p>To prevent the workflow from being deleted, you must <strong>manually pull the latest changes before syncing</strong> in Publii.</p><h3 id=\"step-by-step-fix-using-git\"><strong>Step-by-Step Fix Using Git</strong></h3>\n<ol>\n<li><strong>Open your terminal or command prompt.</strong></li>\n<li><strong>Navigate to your Publii website folder.</strong><pre><code class=\"language-sh\">cd path/to/your/publii/site/output\n</code></pre>\n <em>(Replace <code>path/to/your/publii/site/output</code> with the actual path)</em></li>\n<li><strong>Pull the latest changes from GitHub.</strong><pre><code class=\"language-sh\">git pull origin blog --rebase\n</code></pre>\n If there are conflicts, Git will ask you to resolve them.</li>\n<li><strong>Go back to Publii and sync again.</strong><ul>\n<li>Since Publii now has the latest version (including the workflow), it won’t overwrite it.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"alternative-exclude-githubworkflows-from-publii-sync\"><strong>Alternative: Exclude <code>.github/workflows</code> from Publii Sync</strong></h2>\n<p>If Publii is overwriting everything in the <code>blog</code> branch, you can <strong>exclude the <code>.github</code> folder</strong> (which contains your workflow file) from being removed.</p><h3 id=\"steps-to-exclude-files-in-publii\"><strong>Steps to Exclude Files in Publii:</strong></h3>\n<ol>\n<li>In <strong>Publii</strong>, go to:\n<strong>Settings → Server → Additional Sync Options</strong></li>\n<li>Look for an <strong>“Exclude files/folders from sync”</strong> option.</li>\n<li>Add <code>.github/workflows/</code> to the exclusion list.\n<em>(This prevents Publii from deleting the workflow every time you sync.)</em></li>\n</ol>\n<h2 id=\"unofficial-fix-store-workflow-files-inside-publiis-input-folder\"><strong>Unofficial Fix: Store Workflow Files Inside Publii’s Input Folder</strong></h2>\n<p>Since Publii syncs only what’s inside the <code>output/</code> folder, a workaround is to place the <code>.github/workflows</code> directory inside <strong><code>input/root-files/</code></strong>. This ensures that Publii will upload the workflow file along with the rest of the website content.</p><h3 id=\"steps-to-apply-this-fix\"><strong>Steps to Apply This Fix:</strong></h3>\n<ol>\n<li><strong>Navigate to your Publii site’s input folder:</strong><pre><code class=\"language-sh\">cd path/to/your/publii/site/input/root-files\n</code></pre>\n</li>\n<li><strong>Create the <code>.github/workflows/</code> directory:</strong><pre><code class=\"language-sh\">mkdir -p .github/workflows\n</code></pre>\n</li>\n<li><strong>Move your workflow file into this directory:</strong><pre><code class=\"language-sh\">mv path/to/your/workflow.yml .github/workflows/\n</code></pre>\n</li>\n<li><strong>Sync your site again using Publii.</strong><ul>\n<li>The workflow file should now be included automatically in the deployment.</li>\n</ul>\n</li>\n</ol>\n<p>You can read more about this fix in this GitHub issue:<br>🔗 <a href=\"https://github.com/GetPublii/Publii/issues/2077\">Publii GitHub Issue #2077</a></p><h2 id=\"what-happens-now\"><strong>What Happens Now?</strong></h2>\n<ul>\n<li><strong>You pull the latest changes first (keeps workflow).</strong></li>\n<li><strong>Then you sync with Publii (adds articles).</strong></li>\n<li><strong>No workflow deletion, no Git errors. \ud83c</strong>*</li>\n<li><strong>If you store workflows in <code>input/root-files/</code>, Publii will automatically upload them every sync.</strong></li>\n</ul>\n<p>By following these steps, you can seamlessly update your blog content without interfering with your deployment workflow.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-03-03T11:21:27+05:00",
            "date_modified": "2025-03-04T18:01:42+05:00"
        },
        {
            "id": "https://blog.ehmad.site/resolving-git-merge-conflicts-a-step-by-step-guide/",
            "url": "https://blog.ehmad.site/resolving-git-merge-conflicts-a-step-by-step-guide/",
            "title": "Resolving Git Merge Conflicts: A Step-by-Step Guide",
            "summary": "Git is a powerful version control system that allows developers to collaborate on projects efficiently. However, when multiple contributors work on the same branch or repository, conflicts can arise during merges. These conflicts occur when Git cannot automatically reconcile differences between the local and remote&hellip;",
            "content_html": "<p>Git is a powerful version control system that allows developers to collaborate on projects efficiently. However, when multiple contributors work on the same branch or repository, conflicts can arise during merges. These conflicts occur when Git cannot automatically reconcile differences between the local and remote versions of files. In this article, we’ll explore a real-world example of Git merge conflicts and provide a step-by-step guide to resolving them.</p><hr>\n<h2 id=\"understanding-the-conflict-scenario\">Understanding the Conflict Scenario</h2>\n<p>In our example, a developer attempted to pull updates from the <code>main</code> branch of a remote repository using the command:</p><pre><code class=\"language-bash\">git pull origin main\n</code></pre>\n<p>However, the operation resulted in numerous merge conflicts. The conflict log revealed two primary types of conflicts:</p><ol>\n<li><p><strong>Modify/Delete Conflicts</strong>:</p><ul>\n<li>Some files were deleted in the local branch (<code>HEAD</code>) but modified in the remote branch (<code>origin/main</code>).</li>\n<li>Git could not determine whether to keep the remote changes or respect the local deletion.</li>\n</ul>\n</li>\n<li><p><strong>Rename/Delete Conflicts</strong>:</p><ul>\n<li>A file was renamed in the remote branch but deleted in the local branch.</li>\n<li>Git was unsure whether to apply the rename or honor the deletion.</li>\n</ul>\n</li>\n</ol>\n<p>The conflicting files included HTML pages, CSS stylesheets, configuration files, and metadata files like <code>feed.json</code> and <code>sitemap.xml</code>. These files are critical for maintaining the structure and functionality of the project, so resolving the conflicts correctly is essential.</p><hr>\n<h2 id=\"why-do-merge-conflicts-happen\">Why Do Merge Conflicts Happen?</h2>\n<p>Merge conflicts typically occur due to one of the following reasons:</p><ol>\n<li><p><strong>Divergent Changes</strong>:</p><ul>\n<li>Multiple contributors modify the same part of a file or delete files independently.</li>\n</ul>\n</li>\n<li><p><strong>Outdated Local Branch</strong>:</p><ul>\n<li>The local branch has not been updated with the latest changes from the remote repository, leading to inconsistencies.</li>\n</ul>\n</li>\n<li><p><strong>File Renaming or Deletion</strong>:</p><ul>\n<li>Files are renamed or deleted in one branch while being modified in another.</li>\n</ul>\n</li>\n</ol>\n<p>In our case, the developer’s local branch had deleted several files, while the remote branch had made significant modifications to those same files. This divergence caused Git to flag conflicts during the merge process.</p><hr>\n<h2 id=\"how-to-resolve-merge-conflicts\">How to Resolve Merge Conflicts</h2>\n<p>Resolving merge conflicts requires careful consideration of the changes in both branches. Below is a step-by-step guide to resolving the conflicts described in our scenario.</p><hr>\n<h3 id=\"step-1-review-the-conflicts\">Step 1: Review the Conflicts</h3>\n<p>Run the following command to identify all conflicting files:</p><pre><code class=\"language-bash\">git status\n</code></pre>\n<p>This will display a list of files marked as “both modified” or “deleted by us/them.” For example:</p><pre><code>Unmerged paths:\n  both modified:   index.html\n  deleted by us:   assets/css/style.css\n</code></pre>\n<hr>\n<h3 id=\"step-2-decide-on-a-resolution-strategy\">Step 2: Decide on a Resolution Strategy</h3>\n<p>For each conflicting file, decide whether to:</p><ol>\n<li><p><strong>Keep the Remote Version</strong>:</p><ul>\n<li>If the remote changes are important and should be retained, use:<pre><code class=\"language-bash\">git checkout --theirs &lt;file&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>Keep the Local Version</strong>:</p><ul>\n<li>If the local deletion was intentional and the remote changes are irrelevant, use:<pre><code class=\"language-bash\">git checkout --ours &lt;file&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>Manually Merge</strong>:</p><ul>\n<li>If both versions contain valuable changes, manually edit the file to combine the changes. Open the file in your text editor, resolve any conflict markers (e.g., <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>), and save the file.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"step-3-handle-renamedelete-conflicts\">Step 3: Handle Rename/Delete Conflicts</h3>\n<p>For files involved in rename/delete conflicts, decide whether to:</p><ol>\n<li><p><strong>Apply the Rename</strong>:</p><ul>\n<li>If the rename is valid and the file should exist, use:<pre><code class=\"language-bash\">git mv &lt;old-name&gt; &lt;new-name&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>Delete the File</strong>:</p><ul>\n<li>If the file should no longer exist, remove it:<pre><code class=\"language-bash\">git rm &lt;file&gt;\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"step-4-mark-conflicts-as-resolved\">Step 4: Mark Conflicts as Resolved</h3>\n<p>After resolving each conflict, stage the resolved files:</p><pre><code class=\"language-bash\">git add &lt;file&gt;\n</code></pre>\n<p>Repeat this process for all conflicting files.</p><hr>\n<h3 id=\"step-5-complete-the-merge\">Step 5: Complete the Merge</h3>\n<p>Once all conflicts are resolved and staged, complete the merge by committing the changes:</p><pre><code class=\"language-bash\">git commit\n</code></pre>\n<p>Git will generate a merge commit message. You can edit it if needed.</p><hr>\n<h3 id=\"step-6-push-the-changes\">Step 6: Push the Changes</h3>\n<p>Finally, push the resolved changes to the remote repository:</p><pre><code class=\"language-bash\">git push origin main\n</code></pre>\n<hr>\n<h2 id=\"best-practices-to-avoid-merge-conflicts\">Best Practices to Avoid Merge Conflicts</h2>\n<p>While conflicts are inevitable in collaborative projects, you can minimize their occurrence by following these best practices:</p><ol>\n<li><p><strong>Frequent Pulls</strong>:</p><ul>\n<li>Regularly pull updates from the remote repository to keep your local branch up-to-date.</li>\n</ul>\n</li>\n<li><p><strong>Clear Communication</strong>:</p><ul>\n<li>Coordinate with your team to avoid working on the same files simultaneously.</li>\n</ul>\n</li>\n<li><p><strong>Feature Branches</strong>:</p><ul>\n<li>Use feature branches for new developments and merge them into the main branch after thorough testing.</li>\n</ul>\n</li>\n<li><p><strong>Code Reviews</strong>:</p><ul>\n<li>Conduct code reviews before merging branches to ensure compatibility.</li>\n</ul>\n</li>\n<li><p><strong>Automated Testing</strong>:</p><ul>\n<li>Implement automated tests to catch integration issues early.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Merge conflicts are a natural part of collaborative software development. While they can be frustrating, understanding the root cause and following a systematic resolution process can help you overcome them efficiently. By keeping your branches synchronized, communicating effectively with your team, and adopting best practices, you can reduce the likelihood of conflicts and maintain a smooth workflow.</p><p>Remember, resolving conflicts is not just about fixing errors—it’s an opportunity to ensure that your project reflects the collective effort of your team. With patience and attention to detail, you can turn conflicts into collaboration success stories.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-03-03T10:59:58+05:00",
            "date_modified": "2025-03-03T10:59:58+05:00"
        },
        {
            "id": "https://blog.ehmad.site/self-hosting-bitwarden-with-docker-compose-on-alpine-linux/",
            "url": "https://blog.ehmad.site/self-hosting-bitwarden-with-docker-compose-on-alpine-linux/",
            "title": "Self-Hosting Bitwarden with Docker Compose on Alpine linux",
            "summary": "Bitwarden is a popular open-source password manager that allows users to self-host their own instance for enhanced privacy and control. Using Docker Compose, you can deploy Bitwarden with a custom network and static IP addresses, making it ideal for homelab enthusiasts or small organizations. This&hellip;",
            "content_html": "<p>Bitwarden is a popular open-source password manager that allows users to self-host their own instance for enhanced privacy and control. Using Docker Compose, you can deploy Bitwarden with a custom network and static IP addresses, making it ideal for homelab enthusiasts or small organizations. This guide walks through setting up the Bitwarden unified beta deployment (<code>bitwarden/self-host:beta</code>) with a MariaDB database, connected to an existing Docker network, and troubleshoot common issues along the way.</p><h2 id=\"prerequisites\">Prerequisites</h2>\n<ul>\n<li>Docker and Docker Compose installed on your system.</li>\n<li>A custom Docker network (e.g., <code>homelab_private_network</code>) already created.</li>\n<li>Basic familiarity with Docker commands and YAML configuration.</li>\n</ul>\n<h2 id=\"step-1-define-the-docker-compose-file\">Step 1: Define the Docker Compose File</h2>\n<p>The Bitwarden unified deployment simplifies self-hosting by bundling most components into a single container, though it still requires a separate database. We’ll use MariaDB for this setup. Below is a <code>docker-compose.yml</code> file configured to join an existing network with static IPs.</p><h3 id=\"docker-composeyml\"><code>docker-compose.yml</code></h3>\n<pre><code class=\"language-yaml\">services:\n  bitwarden:\n    depends_on:\n      - db\n    env_file:\n      - settings.env\n    image: bitwarden/self-host:beta\n    restart: always\n    ports:\n      - &quot;80:8080&quot;\n      - &quot;443:8443&quot;\n    volumes:\n      - ./bitwarden-data:/etc/bitwarden\n      - ./logs:/var/log/bitwarden\n    networks:\n      homelab_private_network:\n        ipv4_address: 192.168.2.110\n\n  db:\n    environment:\n      MARIADB_USER: &quot;bitwarden&quot;\n      MARIADB_PASSWORD: &quot;[REDACTED]&quot;\n      MARIADB_DATABASE: &quot;bitwarden_vault&quot;\n      MARIADB_RANDOM_ROOT_PASSWORD: &quot;true&quot;\n    image: mariadb:10\n    restart: always\n    volumes:\n      - ./db-data:/var/lib/mysql\n    networks:\n      homelab_private_network:\n        ipv4_address: 192.168.2.111\n\nnetworks:\n  homelab_private_network:\n    external: true\n</code></pre>\n<h3 id=\"key-components\">Key Components</h3>\n<ul>\n<li><strong>Bitwarden Service</strong>: Uses the <code>bitwarden/self-host:beta</code> image, maps ports <code>80</code> and <code>443</code> to internal ports <code>8080</code> and <code>8443</code>, and mounts volumes for configuration and logs.</li>\n<li><strong>MariaDB Service</strong>: Runs a MySQL-compatible database with predefined credentials and a random root password for security.</li>\n<li><strong>Network</strong>: Joins an existing <code>homelab_private_network</code> with static IPs (<code>192.168.2.110</code> for Bitwarden, <code>192.168.2.111</code> for MariaDB).</li>\n</ul>\n<blockquote>\n<p><strong>Note</strong>: The <code>version</code> field (e.g., <code>3.7</code>) is omitted as it’s obsolete in Docker Compose v2. The schema is inferred from the features used.</p></blockquote>\n<h2 id=\"step-2-configure-environment-variables\">Step 2: Configure Environment Variables</h2>\n<p>Bitwarden requires environment variables for database connectivity and domain settings. Create a <code>settings.env</code> file in the same directory as <code>docker-compose.yml</code>.</p><h3 id=\"settingsenv\"><code>settings.env</code></h3>\n<pre><code>DOMAIN=http://192.168.2.110\nDATABASE_PROVIDER=mysql\nDATABASE_SERVER=db\nDATABASE_NAME=bitwarden_vault\nDATABASE_USERNAME=bitwarden\nDATABASE_PASSWORD=[REDACTED]\nADMIN_ENABLED=true\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_SSL=false\nSMTP_USERNAME=[REDACTED]\nSMTP_PASSWORD=[REDACTED]\n</code></pre>\n<h3 id=\"explanation\">Explanation</h3>\n<ul>\n<li><code>DOMAIN</code>: Set to the Bitwarden container’s static IP (adjust for your setup or use a domain with SSL).</li>\n<li><code>DATABASE_*</code>: Matches the MariaDB service’s credentials and service name.</li>\n<li><code>ADMIN_ENABLED</code>: Enables the admin interface (optional).</li>\n<li><code>SMTP_*</code>: Configures email notifications (optional; replace with your SMTP provider’s details).</li>\n</ul>\n<blockquote>\n<p><strong>Security Tip</strong>: Replace <code>[REDACTED]</code> placeholders with strong, unique passwords and credentials.</p></blockquote>\n<h2 id=\"step-3-prepare-the-environment\">Step 3: Prepare the Environment</h2>\n<p>Create directories for persistent data:</p><pre><code class=\"language-bash\">mkdir -p ./bitwarden-data ./logs ./db-data\n</code></pre>\n<p>Ensure your custom network exists and its subnet includes the chosen IPs. Check with:</p><pre><code class=\"language-bash\">docker network inspect homelab_private_network\n</code></pre>\n<p>Example output might show a subnet of <code>192.168.2.0/24</code>, supporting IPs from <code>192.168.2.1</code> to <code>192.168.2.254</code>. Adjust the IPs in <code>docker-compose.yml</code> if they don’t match (e.g., if the subnet were <code>192.168.0.0/24</code>, use <code>192.168.0.110</code> and <code>192.168.0.111</code>).</p><h2 id=\"step-4-deploy-the-services\">Step 4: Deploy the Services</h2>\n<p>Start the containers in detached mode:</p><pre><code class=\"language-bash\">docker compose up -d\n</code></pre>\n<p>Verify they’re running:</p><pre><code class=\"language-bash\">docker compose ps\n</code></pre>\n<p>You should see both <code>bitwarden</code> and <code>db</code> listed as <code>Up</code>.</p><h2 id=\"step-5-troubleshooting-common-issues\">Step 5: Troubleshooting Common Issues</h2>\n<h3 id=\"issue-1-obsolete-version-warning\">Issue 1: Obsolete <code>version</code> Warning</h3>\n<p>If you see a warning like:</p><pre><code>WARN[0000] docker-compose.yaml: the attribute `version` is obsolete...\n</code></pre>\n<p>Remove the <code>version</code> line from <code>docker-compose.yml</code>. It’s no longer needed in modern Docker Compose versions.</p><h3 id=\"issue-2-subnet-mismatch-error\">Issue 2: Subnet Mismatch Error</h3>\n<p>An error like:</p><pre><code>Error response from daemon: invalid config for network homelab_private_network: ... no configured subnet or ip-range contain the IP address 192.168.0.111\n</code></pre>\n<p>means the assigned IPs don’t match the network’s subnet. Inspect the network:</p><pre><code class=\"language-bash\">docker network inspect homelab_private_network\n</code></pre>\n<p>If the subnet is <code>192.168.2.0/24</code> but your IPs are <code>192.168.0.x</code>, update <code>docker-compose.yml</code> to use <code>192.168.2.110</code> and <code>192.168.2.111</code>, then restart:</p><pre><code class=\"language-bash\">docker compose down\ndocker compose up -d\n</code></pre>\n<h3 id=\"issue-3-container-exits-immediately\">Issue 3: Container Exits Immediately</h3>\n<p>If <code>bitwarden</code> or <code>db</code> stops (check with <code>docker compose ps -a</code>), view logs:</p><pre><code class=\"language-bash\">docker compose logs bitwarden\ndocker compose logs db\n</code></pre>\n<p>Common causes include mismatched database credentials or missing SMTP settings (though SMTP is optional).</p><h2 id=\"step-6-access-bitwarden\">Step 6: Access Bitwarden</h2>\n<p>Once running, access Bitwarden at <code>http://192.168.2.110</code> (or your chosen IP) in a browser. Set up an account and test functionality. For production, consider:</p><ul>\n<li>Adding SSL with a reverse proxy (e.g., Nginx or Traefik) <strong>Important</strong>.</li>\n<li>Backing up the <code>./bitwarden-data</code> and <code>./db-data</code> directories.</li>\n</ul>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Self-hosting Bitwarden with Docker Compose on a custom network offers flexibility and control over your password management on alpine linux. By assigning static IPs and troubleshooting subnet issues, you can integrate it seamlessly into an existing homelab setup. The unified beta deployment simplifies the process, making it accessible even for those new to Docker and alpine.</p><p>For advanced configurations, explore Bitwarden’s official <a href=\"https://bitwarden.com/help/install-on-premise-linux/\">documentation</a> or integrate cloud features with an installation ID and key. Happy self-hosting!</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-03-03T10:20:27+05:00",
            "date_modified": "2025-03-03T10:20:27+05:00"
        },
        {
            "id": "https://blog.ehmad.site/tenda-ac9-firmware-analysis/",
            "url": "https://blog.ehmad.site/tenda-ac9-firmware-analysis/",
            "title": "Tenda AC9 Firmware Analysis",
            "summary": "Reverse Engineering the Tenda AC9 Firmware Routers are the unsung heroes of our connected lives—quietly humming away, keeping us online. But what’s really going on inside them? I recently got curious about my Tenda AC9 router and decided to crack open its firmware—US_AC9V1.0BR_V15.03.05.15_multi_TDE01.bin—to see what&hellip;",
            "content_html": "<h1 id=\"reverse-engineering-the-tenda-ac9-firmware\">Reverse Engineering the Tenda AC9 Firmware</h1>\n<p>Routers are the unsung heroes of our connected lives—quietly humming away, keeping us online. But what’s <em>really</em> going on inside them? I recently got curious about my Tenda AC9 router and decided to crack open its firmware—<code>US_AC9V1.0BR_V15.03.05.15_multi_TDE01.bin</code>—to see what secrets it holds. Spoiler: it’s a mix of the expected, the quirky, and the slightly unsettling. Here’s what I found, how I got there, and why it might matter.</p><h2 id=\"step-1-cracking-the-shell-with-binwalk\">Step 1: Cracking the Shell with Binwalk</h2>\n<p>First things first—I needed to unpack the firmware. It’s a 7.4MB file, a u-boot uImage for a Linux/ARM kernel, timestamped October 29, 2020. Sounded like a job for <code>binwalk</code>, a go-to tool for firmware analysis. After installing it (<code>sudo apt install binwalk</code>), I ran a quick scan:</p><pre><code class=\"language-bash\">wget https://github.com/mrxehmad/Tenda-AC9-Firmware-Analysis/raw/refs/heads/main/US_AC9V1.0BR_V15.03.05.15_multi_TDE01.zip\n</code></pre>\n<pre><code class=\"language-bash\">binwalk US_AC9V1.0BR_V15.03.05.15_multi_TDE01.bin\n</code></pre>\n<p>The output revealed a TRX header, an LZMA-compressed kernel, and a SquashFS filesystem. To get inside, I extracted it:</p><pre><code class=\"language-bash\">binwalk -e US_AC9V1.0BR_V15.03.05.15_multi_TDE01.bin\n</code></pre>\n<p>This gave me a folder with a compressed kernel (<code>5C.LZMA</code>) and a filesystem (<code>18EB48.squashfs</code>). One more command to decompress the filesystem:</p><pre><code class=\"language-bash\">unsquashfs -f -d squashfs-root 18EB48.squashfs\n</code></pre>\n<p>And voilà—a treasure trove of files in <code>squashfs-root/</code>. Time to explore.</p><h2 id=\"step-2-open-ports-and-a-network-surprise\">Step 2: Open Ports and a Network Surprise</h2>\n<p>Before diving into the files, I scanned my router (<code>10.1.15.1</code>) with Nmap to see what it’s exposing:</p><pre><code>PORT      STATE SERVICE\n80/tcp    open  http\n5500/tcp  open  hotline\n8180/tcp  open  unknown\n9000/tcp  open  cslistener\n10004/tcp open  emcrmirccd\n</code></pre>\n<p>Port 80? Expected for the web interface. 8180? Probably a secondary UI (more on that later). But 5500, 9000, and 10004? Those raised eyebrows. “Hotline” and “emcrmirccd” didn’t scream “router,” so I knew I had some digging to do.</p><h2 id=\"step-3-the-filesystem-tells-a-story\">Step 3: The Filesystem Tells a Story</h2>\n<p>Inside <code>squashfs-root/</code>, I found a mix of binaries, libraries, and configs. Nginx was running on port 8180 (<code>/usr/bin/nginx</code>), serving a Luci interface with a FastCGI backend on 8188 (<code>/usr/bin/app_data_center</code>). Port 80 was handled by <code>httpd</code>—standard stuff. But then things got interesting.</p><h3 id=\"hardcoded-connections\">Hardcoded Connections</h3>\n<p>Grepping through the files, I spotted hardcoded IPs and domains:</p><ul>\n<li><code>cloud.tenda.com.cn</code></li>\n<li><code>182.254.148.51</code></li>\n<li><code>download.cloud.tenda.com.cn</code></li>\n<li><code>182.254.218.214</code></li>\n<li><code>182.254.136.200</code></li>\n</ul>\n<p>These popped up in files like <code>./bin/auto_discover</code>, which sends your MAC address and timestamp to <code>api.cloud.tenda.com.cn/route/mac/v1</code>. Device tracking, perhaps? Meanwhile, <code>httpd</code> fetches ad URLs from <code>api.cloud.tenda.com.cn/route/adverts/v1</code>, defaulting to <code>www.tenda.com.cn</code> if it fails. An old-school User-Agent (<code>MSIE 5.01</code>) hinted this code hasn’t been touched in years.</p><h3 id=\"quirky-binaries\">Quirky Binaries</h3>\n<ul>\n<li><code>./bin/speedtest</code>: Pings domains like <code>www.taobao.com</code> and <code>www.google.com</code>—likely a bandwidth test.</li>\n<li><code>./bin/88ip</code>: Sends XML to <code>link.dipserver.com</code> for dynamic DNS.</li>\n<li><code>./bin/logserver</code>: Tries (and often fails) to ship logs somewhere external.</li>\n<li><code>./usr/sbin/telnetd</code>: A Telnet server! No startup script activated it, but its presence felt like a debug leftover.</li>\n</ul>\n<h3 id=\"firewall-rules\">Firewall Rules</h3>\n<p>Hardcoded <code>iptables</code> commands caught my eye:</p><pre><code>iptables -A OUTPUT -p udp --dport %d -m state --state NEW -j %s\niptables -A %s -o %s -j DROP\n</code></pre>\n<p>These seem to manage outbound traffic—maybe to those Tenda cloud servers?</p><h2 id=\"step-4-what-does-it-mean\">Step 4: What Does It Mean?</h2>\n<p>This firmware is chatty. It phones home to Tenda’s cloud, potentially sharing device info, fetching ads, and running services on non-standard ports (5500 and 10004 still elude me—debug backdoors?). The Telnet binary is dormant but tempting for anyone with root access. And those hardcoded IPs? A security researcher’s red flag—perfect for spoofing or tracking.</p><h2 id=\"why-it-matters\">Why It Matters</h2>\n<p>Routers like the Tenda AC9 are everywhere, yet we rarely peek inside. This little adventure showed me how much they’re doing behind the scenes—some useful, some questionable. I’ve dumped my findings on GitHub (link below) with extraction steps, hoping others might join the fun. Could 5500 be a mislabeled Telnet port? Is <code>libupnp.so</code> behind 9000? I’m a newbie at this, but tools like Ghidra are calling—I’ll dive deeper if you do.</p><p>What do you think? Ever analyzed your own gear? Let’s swap notes!</p><ul>\n<li><a href=\"https://github.com/mrxehmad/Tenda-AC9-Firmware-Analysis\">Tenda AC9 Firmware Analysis</a></li>\n<li><a href=\"https://github.com/mrxehmad/api.cloud.tenda.com.cn\">api.cloud.tenda.com.cn</a></li>\n<li><a href=\"https://github.com/SC0p30N3/Tenda-AC15-Firmware-V15.03.05.18\">Tenda AC15 Analysis</a> </li>\n<li><a href=\"https://ea.github.io/blog/2013/10/18/tenda-backdoor/\">Tenda Backdoor Blog</a></li>\n</ul>\n",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-02-23T15:59:55+05:00",
            "date_modified": "2025-02-23T16:02:37+05:00"
        },
        {
            "id": "https://blog.ehmad.site/user-reports-privacy-indicator-issue-with-google-assistant-on-pixel-phones/",
            "url": "https://blog.ehmad.site/user-reports-privacy-indicator-issue-with-google-assistant-on-pixel-phones/",
            "title": "User Reports Privacy Indicator Issue with Google Assistant on Pixel Phones",
            "summary": "A Pixel phone user recently reported a potentially concerning behavior related to Google Assistant and the microphone privacy indicator. According to the user, when activating Google Assistant using the voice command “Hey Google,” the microphone privacy indicator did not appear immediately. However, once the conversation&hellip;",
            "content_html": "<p>A Pixel phone user recently reported a potentially concerning behavior related to Google Assistant and the microphone privacy indicator. According to the user, when activating Google Assistant using the voice command “Hey Google,” the microphone privacy indicator did not appear immediately. However, once the conversation with Google Assistant began, the indicator appeared, signaling that the microphone was in use. This raised questions about whether Google Assistant was listening before displaying the indicator.</p><h3 id=\"possible-explanations-for-this-behavior\">Possible Explanations for This Behavior</h3>\n<ol>\n<li><p><strong>Wake-Up Happens at a Lower System Level</strong><br>Google Assistant continuously listens for the wake phrase “Hey Google” using on-device speech recognition. This process does not trigger the microphone indicator because it operates at a system level without actively recording or sending data. The indicator only appears once Google Assistant starts processing the user’s request.</p></li>\n<li><p><strong>Delayed Privacy Indicator</strong><br>There might be a slight delay in the system UI updating to show the microphone indicator, especially if the phone is under load. This could explain why the indicator appears after Google Assistant starts responding rather than immediately upon activation.</p></li>\n<li><p><strong>Different Microphone Access Levels</strong><br>System-level apps like Google Assistant might bypass standard privacy indicator rules when passively listening for the wake word. The microphone is formally marked “in use” only when the Assistant starts processing a request.</p></li>\n<li><p><strong>Possible Software Bug</strong><br>If this behavior is new or inconsistent, it could be a software glitch introduced in a recent Android update. Google has previously adjusted privacy indicators, and any unexpected changes should be monitored for potential fixes in future updates.</p></li>\n</ol>\n<h3 id=\"how-users-can-investigate-further\">How Users Can Investigate Further</h3>\n<p>If you’re experiencing this issue and want to ensure your privacy, here are a few steps to take:</p><ul>\n<li><p><strong>Check Mic Usage in Privacy Dashboard</strong><br>Navigate to <strong>Settings &gt; Privacy &gt; Permission Manager &gt; Microphone</strong> to see which apps have accessed the microphone and when.</p></li>\n<li><p><strong>Disable “Hey Google” for Testing</strong><br>Try turning off the voice activation feature (<strong>Settings &gt; Google &gt; Assistant &gt; Hey Google &amp; Voice Match</strong>) and manually activating the Assistant with the power button or gesture. If the indicator appears immediately with manual activation, it suggests a difference in how Google Assistant handles wake-word detection.</p></li>\n<li><p><strong>Use a Third-Party Mic Monitoring App</strong><br>Apps like <strong>Access Dots</strong> or <strong>Bouncer</strong> can provide additional insights into microphone access and alert users to unexpected mic activity.</p></li>\n</ul>\n<h3 id=\"should-users-be-concerned\">Should Users Be Concerned?</h3>\n<p>While this behavior does not necessarily indicate unauthorized microphone access, it does highlight a gap in transparency regarding when the microphone is actively listening. Google states that Assistant only listens for the wake word and does not store audio until activated. However, privacy-conscious users may want to take extra precautions to verify this claim.</p><p>If you’ve noticed similar behavior on your Pixel or another Android device, sharing your experience can help determine whether this is an isolated issue or a broader software concern.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-02-14T18:35:30+05:00",
            "date_modified": "2025-02-14T18:35:30+05:00"
        },
        {
            "id": "https://blog.ehmad.site/how-to-use-discord-webhooks/",
            "url": "https://blog.ehmad.site/how-to-use-discord-webhooks/",
            "title": "How to Use Discord Webhooks ",
            "summary": "Discord webhooks are a powerful tool for integrating external services with your Discord server. They allow you to automate messages, send notifications, and even create custom bots without needing to write complex code. In this article, we’ll explore what Discord webhooks are, how to set&hellip;",
            "content_html": "<p>Discord webhooks are a powerful tool for integrating external services with your Discord server. They allow you to automate messages, send notifications, and even create custom bots without needing to write complex code. In this article, we’ll explore what Discord webhooks are, how to set them up, and various ways you can use them to enhance your server.</p><hr>\n<h2 id=\"what-are-discord-webhooks\"><strong>What Are Discord Webhooks?</strong></h2>\n<p>A webhook is essentially a way for an external application or service to send automated messages to a specific channel in your Discord server. Instead of manually posting updates, webhooks enable real-time communication between your server and other platforms like GitHub, Jenkins, monitoring tools, or even custom scripts.</p><p>Webhooks are lightweight, easy to set up, and don’t require you to build a full-fledged bot. They’re perfect for sending notifications, logging events, or automating repetitive tasks.</p><hr>\n<h2 id=\"how-to-create-a-discord-webhook\"><strong>How to Create a Discord Webhook</strong></h2>\n<p>Before you can start using webhooks, you need to create one in your Discord server. Here’s how:</p><h3 id=\"step-1-navigate-to-channel-settings\"><strong>Step 1: Navigate to Channel Settings</strong></h3>\n<ol>\n<li>Open your Discord server.</li>\n<li>Go to the channel where you want the webhook to post messages.</li>\n<li>Click on the gear icon (⚙️) next to the channel name to open the channel settings.</li>\n</ol>\n<h3 id=\"step-2-create-a-webhook\"><strong>Step 2: Create a Webhook</strong></h3>\n<ol>\n<li>In the channel settings, go to <strong>Integrations</strong> &gt; <strong>Webhooks</strong>.</li>\n<li>Click <strong>Create Webhook</strong>.</li>\n<li>Give your webhook a name (e.g., “Notification Bot”).</li>\n<li>Select the channel where the webhook will post messages.</li>\n<li>Optionally, upload an avatar image to customize the webhook’s appearance.</li>\n<li>Click <strong>Copy Webhook URL</strong> and save it securely. This URL is essential for sending messages via the webhook.</li>\n</ol>\n<hr>\n<h2 id=\"how-to-send-messages-using-a-webhook\"><strong>How to Send Messages Using a Webhook</strong></h2>\n<p>Once you’ve created a webhook, you can start sending messages to your Discord server. Below are examples of how to do this using different methods.</p><h3 id=\"1-using-curl-command\"><strong>1. Using <code>curl</code> Command</strong></h3>\n<p>You can send a simple message to your Discord channel using the <code>curl</code> command in your terminal:</p><pre><code class=\"language-bash\">curl -X POST -H &quot;Content-Type: application/json&quot; \\\n-d &#39;{&quot;content&quot;: &quot;Hello, this is a test message from my webhook!&quot;}&#39; \\\nhttps://discord.com/api/webhooks/YOUR_WEBHOOK_URL_HERE\n</code></pre>\n<p>Replace <code>YOUR_WEBHOOK_URL_HERE</code> with the actual webhook URL you copied earlier.</p><h3 id=\"2-using-python\"><strong>2. Using Python</strong></h3>\n<p>If you prefer scripting, here’s how to send a message using Python:</p><pre><code class=\"language-python\">import requests\n\nwebhook_url = &quot;https://discord.com/api/webhooks/YOUR_WEBHOOK_URL_HERE&quot;\ndata = {&quot;content&quot;: &quot;Hello, this is a test message from my webhook!&quot;}\n\nresponse = requests.post(webhook_url, json=data)\n\nif response.status_code == 204:\n    print(&quot;Message sent successfully!&quot;)\nelse:\n    print(f&quot;Failed to send message: {response.status_code}, {response.text}&quot;)\n</code></pre>\n<h3 id=\"3-using-postman-or-insomnia\"><strong>3. Using Postman or Insomnia</strong></h3>\n<p>For non-programmers, tools like <a href=\"https://www.postman.com/\">Postman</a> or <a href=\"https://insomnia.rest/\">Insomnia</a> can be used to manually send HTTP POST requests to the webhook URL.</p><hr>\n<h2 id=\"customizing-webhook-messages\"><strong>Customizing Webhook Messages</strong></h2>\n<p>Discord webhooks allow you to customize the sender’s name, avatar, and even send rich embeds for more visually appealing messages.</p><h3 id=\"1-custom-sender-name-and-avatar\"><strong>1. Custom Sender Name and Avatar</strong></h3>\n<p>You can override the default webhook name and avatar by including the <code>username</code> and <code>avatar_url</code> fields in your payload:</p><pre><code class=\"language-json\">{\n  &quot;username&quot;: &quot;My Custom Bot&quot;,\n  &quot;avatar_url&quot;: &quot;https://example.com/avatar.png&quot;,\n  &quot;content&quot;: &quot;This message is sent by a custom bot!&quot;\n}\n</code></pre>\n<h3 id=\"2-sending-rich-embeds\"><strong>2. Sending Rich Embeds</strong></h3>\n<p>Embeds allow you to send structured and visually appealing messages. Here’s an example of an embed payload:</p><pre><code class=\"language-json\">{\n  &quot;embeds&quot;: [\n    {\n      &quot;title&quot;: &quot;New Blog Post!&quot;,\n      &quot;description&quot;: &quot;Check out our latest article on how to use webhooks.&quot;,\n      &quot;url&quot;: &quot;https://example.com/blog-post&quot;,\n      &quot;color&quot;: 16711680,\n      &quot;fields&quot;: [\n        {\n          &quot;name&quot;: &quot;Author&quot;,\n          &quot;value&quot;: &quot;John Doe&quot;,\n          &quot;inline&quot;: true\n        },\n        {\n          &quot;name&quot;: &quot;Published Date&quot;,\n          &quot;value&quot;: &quot;2023-10-01&quot;,\n          &quot;inline&quot;: true\n        }\n      ],\n      &quot;thumbnail&quot;: {\n        &quot;url&quot;: &quot;https://example.com/thumbnail.jpg&quot;\n      }\n    }\n  ]\n}\n</code></pre>\n<p>Send this payload using <code>curl</code>, Python, or any other method.</p><hr>\n<h2 id=\"use-cases-for-discord-webhooks\"><strong>Use Cases for Discord Webhooks</strong></h2>\n<p>Here are some practical ways you can use webhooks to enhance your Discord server:</p><h3 id=\"1-notifications-from-external-services\"><strong>1. Notifications from External Services</strong></h3>\n<ul>\n<li><strong>GitHub</strong>: Get notifications for new commits, issues, or pull requests.</li>\n<li><strong>Jenkins</strong>: Notify your team when a build succeeds or fails.</li>\n<li><strong>Uptime Monitoring</strong>: Alert your team if a server goes down.</li>\n</ul>\n<h3 id=\"2-logging-system\"><strong>2. Logging System</strong></h3>\n<p>Use webhooks to log events from your applications or servers. For example:</p><ul>\n<li>Log errors or warnings directly to a dedicated “logs” channel.</li>\n<li>Monitor server health and send alerts when something goes wrong.</li>\n</ul>\n<h3 id=\"3-moderation-alerts\"><strong>3. Moderation Alerts</strong></h3>\n<p>Set up a script or bot that monitors your server for certain activities (e.g., spam detection, keyword filtering) and sends moderation alerts via the webhook.</p><h3 id=\"4-game-or-event-notifications\"><strong>4. Game or Event Notifications</strong></h3>\n<p>If you’re running a gaming community, use webhooks to notify users about:</p><ul>\n<li>Upcoming game releases.</li>\n<li>Server maintenance schedules.</li>\n<li>Tournament announcements.</li>\n</ul>\n<h3 id=\"5-automated-announcements\"><strong>5. Automated Announcements</strong></h3>\n<p>Use webhooks to automate recurring announcements, such as:</p><ul>\n<li>Daily reminders.</li>\n<li>Weekly updates.</li>\n<li>Event countdowns.</li>\n</ul>\n<hr>\n<h2 id=\"security-tips-for-using-webhooks\"><strong>Security Tips for Using Webhooks</strong></h2>\n<p>While webhooks are convenient, they can also pose security risks if not handled properly. Here are some tips to keep your webhooks secure:</p><ol>\n<li><strong>Keep Your Webhook URL Secret</strong>: Treat your webhook URL like a password. Anyone with access to it can send messages to your server.</li>\n<li><strong>Delete Unused Webhooks</strong>: If you no longer need a webhook, delete it to prevent misuse.</li>\n<li><strong>Regenerate Webhooks if Compromised</strong>: If you suspect your webhook has been compromised, delete it and create a new one.</li>\n<li><strong>Limit Permissions</strong>: Ensure the webhook only posts to the intended channel and doesn’t have unnecessary permissions.</li>\n</ol>\n<hr>\n<h2 id=\"troubleshooting-common-issues\"><strong>Troubleshooting Common Issues</strong></h2>\n<h3 id=\"1-unknown-webhook-error\"><strong>1. “Unknown Webhook” Error</strong></h3>\n<p>This error occurs if the webhook URL is invalid, deleted, or disabled. Double-check the URL and ensure the webhook still exists in your server settings.</p><h3 id=\"2-rate-limits\"><strong>2. Rate Limits</strong></h3>\n<p>Discord imposes rate limits on webhooks. If you’re sending too many requests in a short period, you may be temporarily blocked. Wait a few minutes before trying again.</p><h3 id=\"3-formatting-issues\"><strong>3. Formatting Issues</strong></h3>\n<p>Ensure your JSON payload is correctly formatted. Missing brackets, quotes, or commas can cause errors.</p><hr>\n<h2 id=\"conclusion\"><strong>Conclusion</strong></h2>\n<p>Discord webhooks are a versatile and easy-to-use tool for automating messages and integrating external services with your server. Whether you’re sending notifications, logging events, or creating custom bots, webhooks can help streamline your workflows and keep your community informed.</p><p>By following the steps outlined in this guide, you can set up and use webhooks effectively while keeping your server secure. Experiment with different use cases and customize your messages to make the most of this powerful feature!</p><p>Happy automating! 🚀</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-02-03T13:32:35+05:00",
            "date_modified": "2025-02-03T13:33:11+05:00"
        },
        {
            "id": "https://blog.ehmad.site/phishing-attack-chain-report-fiverr/",
            "url": "https://blog.ehmad.site/phishing-attack-chain-report-fiverr/",
            "title": "Phishing Attack Chain Report - Fiverr",
            "summary": "Phishing Attack Chain Report Incident Overview: I recently encountered a phishing attempt within my Fiverr inbox. The attacker used a GIF image to bypass Fiverr’s security measures and avoid detection. The GIF contained a QR code that, when scanned, directed me to a phishing page.",
            "content_html": "<p><strong>Phishing Attack Chain Report</strong></p><p><strong>Incident Overview:</strong>\nI recently encountered a phishing attempt within my Fiverr inbox. The attacker used a GIF image to bypass Fiverr’s security measures and avoid detection. The GIF contained a QR code that, when scanned, directed me to a phishing page.</p><p><strong>Phishing URL:</strong><br>Initial URL: <a href=\"https://fiverr.offer984732.cfd/7ky7njr1pzz7970t\">https://fiverr.offer984732.cfd/7ky7njr1pzz7970t</a></p><p><strong>Attack Chain:</strong></p><ol>\n<li><p><strong>Initial Contact:</strong>  </p><ul>\n<li>The phishing attempt began with a message in my Fiverr inbox containing a GIF image.</li>\n<li>The GIF displayed a QR code instead of a direct link, likely to circumvent Fiverr’s security mechanisms.</li>\n</ul>\n</li>\n<li><p><strong>Phishing Page:</strong>  </p><ul>\n<li>Scanning the QR code redirected me to a phishing website disguised to resemble Fiverr’s official payment page.</li>\n<li>The page prompted me to “receive payment” from a client by adding my credit card details.</li>\n<li>Notably, right-clicking and other browser functions, such as saving the page, were disabled to prevent analysis or inspection.</li>\n</ul>\n</li>\n<li><p><strong>Redirection to Payment Form:</strong>  </p><ul>\n<li>Upon attempting to “receive funds,” I was redirected to another URL:\n<a href=\"https://fiverr.offer984732.cfd/merchant/order/7ky7njr1pzz7970t\">https://fiverr.offer984732.cfd/merchant/order/7ky7njr1pzz7970t</a></li>\n<li>This page requested full credit card details under the guise of processing the payment.</li>\n</ul>\n</li>\n<li><p><strong>Transaction Failure:</strong>  </p><ul>\n<li>After entering test card details, the page displayed a “transaction failed” message.</li>\n<li>This indicates the phishing attempt’s goal was purely to collect financial information rather than process any real transaction.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Observations and Indicators of Compromise (IoCs):</strong></p><ul>\n<li>The URL contains suspicious subdomains and random alphanumeric paths.</li>\n<li>The use of QR codes in phishing attempts to avoid link detection.</li>\n<li>Browser functions such as right-clicking being disabled, which is a common phishing tactic.</li>\n<li>Fake payment processing followed by a transaction failure message.</li>\n</ul>\n<p><strong>Recommendations:</strong></p><ol>\n<li><strong>Avoid Scanning Unknown QR Codes:</strong>  <ul>\n<li>Do not scan QR codes from unknown or unverified sources, especially in online freelance platforms.</li>\n</ul>\n</li>\n<li><strong>Verify URLs Carefully:</strong>  <ul>\n<li>Always cross-check URLs and avoid interacting with unfamiliar domains.</li>\n</ul>\n</li>\n<li><strong>Enable Security Features:</strong>  <ul>\n<li>Use browser extensions and security tools to identify phishing sites.</li>\n</ul>\n</li>\n<li><strong>Report the Incident:</strong>  <ul>\n<li>Report such incidents to Fiverr’s support team and relevant cybersecurity authorities.</li>\n</ul>\n</li>\n<li><strong>Monitor Financial Accounts:</strong>  <ul>\n<li>If any sensitive information was entered, monitor bank statements and enable fraud alerts.</li>\n</ul>\n</li>\n</ol>\n<p><strong>Conclusion:</strong>\nThis phishing attempt leveraged an innovative technique by embedding a QR code in a GIF to bypass detection and used social engineering to prompt credit card submission. Users should remain vigilant and report suspicious activity to prevent potential financial loss.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2025-01-26T21:23:13+05:00",
            "date_modified": "2025-01-26T21:23:13+05:00"
        },
        {
            "id": "https://blog.ehmad.site/data-communications-and-networking-5th-edition/",
            "url": "https://blog.ehmad.site/data-communications-and-networking-5th-edition/",
            "title": "Data Communications and Networking 5th edition",
            "summary": "Chapter 18: Introduction to Network Layer in Data Communications and Networking (5th edition) by Behrouz A. Forouzan: The network layer plays a critical role in delivering data between devices over interconnected networks. It provides the following key services: Packet switching is a fundamental method for&hellip;",
            "content_html": "<p><strong>Chapter 18: Introduction to Network Layer</strong> in Data Communications and Networking (5th edition) by Behrouz A. Forouzan:</p><hr>\n<h3 id=\"181-network-layer-services\"><strong>18.1 NETWORK-LAYER SERVICES</strong></h3>\n<p>The network layer plays a critical role in delivering data between devices over interconnected networks. It provides the following key services:</p><h4 id=\"1811-packetizing\"><strong>18.1.1 Packetizing</strong></h4>\n<ul>\n<li><strong>Definition</strong>: Packetizing is the process of dividing large chunks of data into smaller units called packets, which are easier to manage, transmit, and process.</li>\n<li><strong>Structure</strong>: Each packet contains:<ul>\n<li><strong>Payload</strong>: The actual data being transmitted.</li>\n<li><strong>Header</strong>: Contains metadata such as the source and destination addresses, sequence numbers, and error-checking information.</li>\n</ul>\n</li>\n<li><strong>Purpose</strong>: <ul>\n<li>Facilitates efficient use of the network.</li>\n<li>Allows for error detection and recovery by retransmitting only the affected packets instead of the entire data.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1812-routing-and-forwarding\"><strong>18.1.2 Routing and Forwarding</strong></h4>\n<ul>\n<li><strong>Routing</strong>:<ul>\n<li>Involves determining the optimal path for packets to travel from the source to the destination.</li>\n<li>Algorithms like Dijkstra’s and Bellman-Ford are commonly used.</li>\n<li>Factors considered: network topology, link costs, and policy constraints.</li>\n</ul>\n</li>\n<li><strong>Forwarding</strong>:<ul>\n<li>The act of moving a packet to its next destination (next-hop router or the final recipient).</li>\n<li>Based on information in the routing table, the router decides the best outgoing link.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1813-other-services\"><strong>18.1.3 Other Services</strong></h4>\n<ol>\n<li><strong>Error Handling</strong>:<ul>\n<li>Detects and sometimes corrects errors in transmitted packets.</li>\n<li>Error detection methods like checksums are used.</li>\n</ul>\n</li>\n<li><strong>Quality of Service (QoS)</strong>:<ul>\n<li>Ensures performance requirements such as bandwidth, delay, and jitter are met.</li>\n<li>Differentiates traffic types (e.g., voice, video, or text) to prioritize critical data.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h3 id=\"182-packet-switching\"><strong>18.2 PACKET SWITCHING</strong></h3>\n<p>Packet switching is a fundamental method for data transfer in modern networks, enabling flexibility and efficiency. It involves breaking data into smaller packets that are sent independently.</p><h4 id=\"1821-datagram-approach-connectionless-service\"><strong>18.2.1 Datagram Approach: Connectionless Service</strong></h4>\n<ul>\n<li><strong>Characteristics</strong>:<ul>\n<li>Each packet is treated as an independent entity.</li>\n<li>Packets may take different paths through the network to reach the destination.</li>\n<li>Each packet includes full routing information (source and destination addresses).</li>\n</ul>\n</li>\n<li><strong>Advantages</strong>:<ul>\n<li>Highly scalable and robust.</li>\n<li>No need for establishing or maintaining a connection.</li>\n</ul>\n</li>\n<li><strong>Example</strong>: The Internet Protocol (IP) operates using this approach.</li>\n</ul>\n<h4 id=\"1822-virtual-circuit-approach-connection-oriented-service\"><strong>18.2.2 Virtual-Circuit Approach: Connection-Oriented Service</strong></h4>\n<ul>\n<li><strong>Characteristics</strong>:<ul>\n<li>A logical connection is established between the source and destination before data transfer.</li>\n<li>All packets follow the same pre-established path, ensuring order.</li>\n</ul>\n</li>\n<li><strong>Advantages</strong>:<ul>\n<li>Reliable communication with guaranteed sequencing and error detection.</li>\n<li>Simplified processing at intermediate routers.</li>\n</ul>\n</li>\n<li><strong>Example</strong>: Asynchronous Transfer Mode (ATM) and Multi-Protocol Label Switching (MPLS).</li>\n</ul>\n<hr>\n<h3 id=\"183-network-layer-performance\"><strong>18.3 NETWORK-LAYER PERFORMANCE</strong></h3>\n<p>The efficiency and reliability of the network layer are measured using the following metrics:</p><h4 id=\"1831-delay\"><strong>18.3.1 Delay</strong></h4>\n<ul>\n<li><strong>Types of Delay</strong>:<ol>\n<li><strong>Propagation Delay</strong>: <ul>\n<li>Time for a signal to travel from source to destination through the physical medium.</li>\n<li>Formula: ( \\text{Propagation Delay} = \\frac{\\text{Distance}}{\\text{Propagation Speed}} )</li>\n</ul>\n</li>\n<li><strong>Transmission Delay</strong>: <ul>\n<li>Time required to push all bits of a packet onto the transmission medium.</li>\n<li>Formula: ( \\text{Transmission Delay} = \\frac{\\text{Packet Size}}{\\text{Bandwidth}} )</li>\n</ul>\n</li>\n<li><strong>Queuing Delay</strong>:<ul>\n<li>Time a packet spends waiting in a router’s queue before being processed or transmitted.</li>\n<li>Varies depending on network congestion.</li>\n</ul>\n</li>\n<li><strong>Processing Delay</strong>:<ul>\n<li>Time taken by a router to examine and forward a packet.</li>\n<li>Includes route lookup, header parsing, and error checking.</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"1832-throughput\"><strong>18.3.2 Throughput</strong></h4>\n<ul>\n<li><strong>Definition</strong>: The rate at which data is successfully transmitted and received over the network.</li>\n<li><strong>Factors Affecting Throughput</strong>:<ul>\n<li><strong>Bandwidth</strong>: The maximum data transfer rate of the medium.</li>\n<li><strong>Network Congestion</strong>: Overloaded links or routers reduce throughput.</li>\n<li><strong>Protocol Overhead</strong>: Header and control data can consume significant portions of bandwidth.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1833-packet-loss\"><strong>18.3.3 Packet Loss</strong></h4>\n<ul>\n<li><strong>Definition</strong>: The percentage of packets that fail to reach their destination due to errors, congestion, or buffer overflow at routers.</li>\n<li><strong>Effects</strong>:<ul>\n<li>Degrades the quality of real-time applications like VoIP or video streaming.</li>\n<li>Increases retransmissions, causing further delays and congestion.</li>\n</ul>\n</li>\n<li><strong>Mitigation Techniques</strong>:<ul>\n<li>Implementing retransmission protocols (e.g., TCP).</li>\n<li>Using redundant packet encoding to recover lost data.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1834-congestion-control\"><strong>18.3.4 Congestion Control</strong></h4>\n<ul>\n<li><strong>Definition</strong>: Strategies to prevent and manage excessive packet buildup in the network.</li>\n<li><strong>Techniques</strong>:<ol>\n<li><strong>Traffic Shaping</strong>:<ul>\n<li>Regulates the flow of data entering the network to prevent sudden bursts of traffic.</li>\n<li>Example: Token Bucket and Leaky Bucket algorithms.</li>\n</ul>\n</li>\n<li><strong>Packet Scheduling</strong>:<ul>\n<li>Prioritizes certain packets based on their importance or type.</li>\n<li>Example: First-Come-First-Serve (FCFS) and Priority Scheduling.</li>\n</ul>\n</li>\n<li><strong>Retransmission Strategies</strong>:<ul>\n<li>Automatically resends lost or corrupted packets.</li>\n<li>Includes mechanisms like Automatic Repeat Request (ARQ).</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h3 id=\"184-ipv4-addresses\"><strong>18.4 IPv4 ADDRESSES</strong></h3>\n<p>IPv4 addresses are a fundamental aspect of the network layer, ensuring that devices can be uniquely identified for communication.</p><h4 id=\"1841-address-space\"><strong>18.4.1 Address Space</strong></h4>\n<ul>\n<li><strong>32-Bit Addressing</strong>: IPv4 uses a 32-bit structure, allowing for (2^{32}) unique addresses, approximately 4.3 billion.</li>\n<li><strong>Depletion</strong>: Due to the rapid growth of devices, the IPv4 address space is nearly exhausted, leading to the adoption of solutions like NAT and IPv6.</li>\n</ul>\n<h4 id=\"1842-classful-addressing\"><strong>18.4.2 Classful Addressing</strong></h4>\n<ul>\n<li>IPv4 originally divided its address space into five classes, identified by the first few bits of the address:<ul>\n<li><strong>Class A</strong>: <ul>\n<li>Range: (0.0.0.0) to (127.255.255.255).</li>\n<li>Large networks with up to (2^{24}) hosts.</li>\n</ul>\n</li>\n<li><strong>Class B</strong>:<ul>\n<li>Range: (128.0.0.0) to (191.255.255.255).</li>\n<li>Medium-sized networks with up to (2^{16}) hosts.</li>\n</ul>\n</li>\n<li><strong>Class C</strong>:<ul>\n<li>Range: (192.0.0.0) to (223.255.255.255).</li>\n<li>Small networks with up to (2^{8}) hosts.</li>\n</ul>\n</li>\n<li><strong>Class D</strong>:<ul>\n<li>Range: (224.0.0.0) to (239.255.255.255).</li>\n<li>Reserved for multicast communication.</li>\n</ul>\n</li>\n<li><strong>Class E</strong>:<ul>\n<li>Range: (240.0.0.0) to (255.255.255.255).</li>\n<li>Reserved for experimental use.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1843-classless-addressing\"><strong>18.4.3 Classless Addressing</strong></h4>\n<ul>\n<li><strong>CIDR (Classless Inter-Domain Routing)</strong>:<ul>\n<li>Eliminates rigid address classes, allowing for flexible allocation of IP addresses.</li>\n<li>Uses <strong>prefix notation</strong> (e.g., (192.168.1.0/24)), where the “/24” indicates the number of bits in the network prefix.</li>\n</ul>\n</li>\n<li><strong>Variable-Length Subnet Masking (VLSM)</strong>:<ul>\n<li>Divides an IP address into subnets of different sizes.</li>\n<li>Helps optimize address utilization and reduce wastage.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1844-dynamic-host-configuration-protocol-dhcp\"><strong>18.4.4 Dynamic Host Configuration Protocol (DHCP)</strong></h4>\n<ul>\n<li><strong>Purpose</strong>:<ul>\n<li>Automates the assignment of IP addresses, subnet masks, gateways, and DNS settings.</li>\n</ul>\n</li>\n<li><strong>Advantages</strong>:<ul>\n<li>Reduces manual configuration errors.</li>\n<li>Allows for reusing IP addresses when devices leave the network.</li>\n</ul>\n</li>\n<li><strong>Process</strong>:<ul>\n<li>A device sends a <strong>DHCP Discovery</strong> request.</li>\n<li>The server responds with a <strong>DHCP Offer</strong> containing configuration details.</li>\n<li>The device accepts via a <strong>DHCP Request</strong>, and the server confirms with a <strong>DHCP Acknowledgment</strong>.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1845-network-address-translation-nat\"><strong>18.4.5 Network Address Translation (NAT)</strong></h4>\n<ul>\n<li><strong>Purpose</strong>:<ul>\n<li>Allows multiple devices on a private network to share a single public IP address.</li>\n<li>Conserves the limited IPv4 address space.</li>\n</ul>\n</li>\n<li><strong>Types</strong>:<ul>\n<li><strong>Static NAT</strong>: Maps one private IP to one public IP.</li>\n<li><strong>Dynamic NAT</strong>: Maps private IPs to available public IPs from a pool.</li>\n<li><strong>Port Address Translation (PAT)</strong>: Maps multiple private IPs to a single public IP using unique port numbers.</li>\n</ul>\n</li>\n<li><strong>Advantages</strong>:<ul>\n<li>Enhances security by hiding internal network structure.</li>\n<li>Reduces the demand for public IP addresses.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"185-forwarding-of-ip-packets\"><strong>18.5 FORWARDING OF IP PACKETS</strong></h3>\n<p>Forwarding is the mechanism by which routers move packets from their source to the correct destination.</p><h4 id=\"1851-forwarding-based-on-destination-address\"><strong>18.5.1 Forwarding Based on Destination Address</strong></h4>\n<ul>\n<li><strong>Process</strong>:<ol>\n<li>The router examines the destination IP address in the packet header.</li>\n<li>It consults its <strong>routing table</strong> to determine the next hop.</li>\n<li>The packet is forwarded to the next router or the final destination.</li>\n</ol>\n</li>\n<li><strong>Routing Table Entries</strong>:<ul>\n<li><strong>Destination Network</strong>: Identifies the target subnet.</li>\n<li><strong>Next Hop</strong>: The IP address of the next router.</li>\n<li><strong>Metric</strong>: A value representing the cost or distance to the destination.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1852-forwarding-based-on-label\"><strong>18.5.2 Forwarding Based on Label</strong></h4>\n<ul>\n<li><strong>Label-Based Forwarding</strong>:<ul>\n<li>Utilized in <strong>Multiprotocol Label Switching (MPLS)</strong>.</li>\n<li>Packets are assigned a <strong>label</strong> at the ingress router.</li>\n<li>Intermediate routers use labels, not IP addresses, for forwarding decisions.</li>\n</ul>\n</li>\n<li><strong>Advantages</strong>:<ul>\n<li>Faster forwarding as label lookups are simpler than IP-based routing.</li>\n<li>Supports traffic engineering, allowing for efficient use of network resources.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1853-routers-as-packet-switches\"><strong>18.5.3 Routers as Packet Switches</strong></h4>\n<ul>\n<li><strong>Functionality</strong>:<ul>\n<li>Routers act as intelligent devices in packet-switched networks.</li>\n<li>They handle:<ol>\n<li>Receiving packets from the input interface.</li>\n<li>Analyzing headers to determine the next hop.</li>\n<li>Forwarding packets via the appropriate output interface.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><strong>Key Roles</strong>:<ul>\n<li><strong>Packet Inspection</strong>: Examines headers for routing and QoS decisions.</li>\n<li><strong>Routing Table Maintenance</strong>: Updates routes dynamically using protocols like OSPF or BGP.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"summary-of-key-concepts\"><strong>Summary of Key Concepts</strong></h3>\n<ul>\n<li><strong>Packet Switching</strong>: Core mechanism for efficient data transfer.</li>\n<li><strong>Routing and Forwarding</strong>: Ensure packets traverse networks to reach their destination.</li>\n<li><strong>IP Addressing</strong>: Vital for device identification and communication, with techniques like CIDR, DHCP, and NAT enhancing efficiency.</li>\n<li><strong>Performance Metrics</strong>: Delay, throughput, and congestion control are essential for optimizing communication.</li>\n<li><strong>DHCP and NAT</strong>: Critical protocols for managing IP address allocation and conservation.</li>\n</ul>\n",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
                   "book summery"
            ],
            "date_published": "2025-01-08T19:14:02+05:00",
            "date_modified": "2025-01-08T19:14:59+05:00"
        }
    ]
}
