{
    "version": "https://jsonfeed.org/version/1",
    "title": "Ehmi",
    "description": "",
    "home_page_url": "https://blog.ehmad.site",
    "feed_url": "https://blog.ehmad.site/feed.json",
    "user_comment": "",
    "icon": "https://blog.ehmad.site/media/website/ehmi.png",
    "author": {
        "name": "Ehmad"
    },
    "items": [
        {
            "id": "https://blog.ehmad.site/setting-up-a-secure-and-optimized-searxng-instance-with-docker-compose/",
            "url": "https://blog.ehmad.site/setting-up-a-secure-and-optimized-searxng-instance-with-docker-compose/",
            "title": "Setting Up a Secure and Optimized SearXNG Instance with Docker Compose",
            "summary": "If you’re looking to deploy a private instance of SearXNG—a powerful, open-source metasearch engine—using Docker Compose is one of the simplest and most efficient ways to do it. This guide explores the custom Docker Compose configuration for SearXNG, explains its benefits, and provides step-by-step instructions&hellip;",
            "content_html": "<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://blog.ehmad.site/media/posts/11/0_wt6Gd9kkdlifAPKr.png\" alt=\"Setting Up a Secure and Optimized SearXNG Instance with Docker Compose\" width=\"512\" height=\"505\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-xs.webp 640w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-sm.webp 768w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-md.webp 1024w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-lg.webp 1366w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-xl.webp 1600w ,https://blog.ehmad.site/media/posts/11/responsive/0_wt6Gd9kkdlifAPKr-2xl.webp 1920w\"></figure><p>If you’re looking to deploy a private instance of SearXNG—a powerful, open-source metasearch engine—using Docker Compose is one of the simplest and most efficient ways to do it. This guide explores the custom Docker Compose configuration for SearXNG, explains its benefits, and provides step-by-step instructions for running it on your network.</p><h3 id=\"overview-of-the-docker-compose-configuration\">Overview of the Docker Compose Configuration</h3>\n<p>The following <code>docker-compose.yml</code> file has been designed to prioritize security, efficiency, and ease of management. It sets up SearXNG to run on port 80 of the host (mapped from port 8080 in the container), provides custom logging, and limits container privileges to only what’s necessary.</p><p>Here’s the complete Docker Compose configuration:</p><pre><code class=\"language-yaml\">version: &quot;3.7&quot;\n\nservices:\n  searxng:\n    container_name: searxng\n    image: docker.io/searxng/searxng:latest\n    restart: unless-stopped\n    ports:\n      - &quot;80:8080&quot;\n    volumes:\n      - ./searxng:/etc/searxng:rw\n    environment:\n      - SEARXNG_BASE_URL=http://10.1.15.196/\n      - UWSGI_WORKERS=${SEARXNG_UWSGI_WORKERS:-4}\n      - UWSGI_THREADS=${SEARXNG_UWSGI_THREADS:-4}\n    cap_drop:\n      - ALL\n    cap_add:\n      - CHOWN\n      - SETGID\n      - SETUID\n    logging:\n      driver: &quot;json-file&quot;\n      options:\n        max-size: &quot;1m&quot;\n        max-file: &quot;1&quot;\n</code></pre>\n<h3 id=\"key-components-of-the-configuration\">Key Components of the Configuration</h3>\n<p>Let’s break down each part of this configuration file:</p><ul>\n<li><strong>Container Name</strong>: Naming the container as <code>searxng</code> makes it easy to manage and identify in <code>docker ps</code> outputs.</li>\n<li><strong>Image</strong>: Specifies the SearXNG Docker image (<code>docker.io/searxng/searxng:latest</code>), ensuring you’re using the latest version.</li>\n<li><strong>Restart Policy</strong>: Automatically restarts the container if it fails, ensuring your SearXNG instance remains online without manual intervention.</li>\n<li><strong>Ports</strong>: Maps port 80 on the host to port 8080 in the container, making SearXNG accessible at <code>http://10.1.15.196/</code>.</li>\n<li><strong>Volumes</strong>: Mounts a local directory (<code>./searxng</code>) to <code>/etc/searxng</code> in the container, allowing persistent configuration storage and easy customization.</li>\n<li><strong>Environment Variables</strong>:<ul>\n<li><strong><code>SEARXNG_BASE_URL</code></strong>: Configures SearXNG’s base URL for local access at <code>http://10.1.15.196/</code>.</li>\n<li><strong><code>UWSGI_WORKERS</code> and <code>UWSGI_THREADS</code></strong>: Dynamically set default values for <code>uwsgi</code> workers and threads, optimizing for available CPU and RAM.</li>\n</ul>\n</li>\n<li><strong>Capabilities</strong>:<ul>\n<li><strong><code>cap_drop</code> and <code>cap_add</code></strong>: Increases security by dropping all unnecessary capabilities and only allowing minimal privileges like <code>CHOWN</code>, <code>SETGID</code>, and <code>SETUID</code>.</li>\n</ul>\n</li>\n<li><strong>Logging</strong>: Limits the size and number of log files with the <code>json-file</code> driver to avoid excessive disk usage.</li>\n</ul>\n<h3 id=\"benefits-of-this-configuration\">Benefits of This Configuration</h3>\n<ol>\n<li><p><strong>Ease of Use and Deployment</strong>: Docker Compose simplifies deployment by combining all configurations into a single, easily manageable file. With this setup, starting or stopping your SearXNG instance only requires a single command.</p></li>\n<li><p><strong>Security</strong>: </p><ul>\n<li><strong>Minimal Capabilities</strong>: By dropping all capabilities except those essential for SearXNG, you limit the potential attack surface.</li>\n<li><strong>Port Mapping</strong>: Exposing only the necessary port (80 on the host) helps secure access to SearXNG.</li>\n</ul>\n</li>\n<li><p><strong>Efficiency and Performance</strong>:</p><ul>\n<li><strong>Customizable Worker and Thread Settings</strong>: By using environment variables to set default values for <code>UWSGI_WORKERS</code> and <code>UWSGI_THREADS</code>, this configuration ensures that SearXNG can handle multiple requests efficiently without exhausting resources.</li>\n<li><strong>Automatic Restart</strong>: With <code>restart: unless-stopped</code>, your SearXNG instance can recover automatically from failures, maintaining high uptime.</li>\n</ul>\n</li>\n<li><p><strong>Log Management</strong>: Configuring the log rotation with <code>max-size</code> and <code>max-file</code> helps prevent log files from consuming excessive disk space. This keeps your environment clean and reduces the need for manual log maintenance.</p></li>\n<li><p><strong>Customization Through Volumes</strong>: Mounting a local directory to <code>/etc/searxng</code> in the container allows you to customize and persist SearXNG’s configuration easily. Any changes made in the local <code>./searxng</code> directory will automatically update the configuration within the container, making it simple to apply updates.</p></li>\n</ol>\n<h3 id=\"how-to-run-this-docker-compose-configuration\">How to Run This Docker Compose Configuration</h3>\n<ol>\n<li><p><strong>Save the Compose File</strong>: Create a file named <code>docker-compose.yml</code> with the above configuration.</p></li>\n<li><p><strong>Create a Local Configuration Directory</strong>: Make a directory named <code>searxng</code> in the same location as the <code>docker-compose.yml</code> file. This directory will store your SearXNG configuration files, ensuring they persist between container restarts.</p><pre><code class=\"language-bash\">mkdir searxng\n</code></pre>\n</li>\n<li><p><strong>Start the Container</strong>: From the directory containing the <code>docker-compose.yml</code> file, run the following command to build and start your SearXNG instance:</p><pre><code class=\"language-bash\">docker-compose up -d\n</code></pre>\n</li>\n<li><p><strong>Access SearXNG</strong>: Once the container is running, open a web browser and navigate to <code>http://10.1.15.196/</code>. You should see the SearXNG search interface.</p></li>\n<li><p><strong>Stop the Container</strong>: To stop the container, use the following command:</p><pre><code class=\"language-bash\">docker-compose down\n</code></pre>\n</li>\n</ol>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>With this optimized Docker Compose configuration, you’re set up for a secure, efficient, and user-friendly SearXNG experience. This configuration balances security, performance, and simplicity, making it ideal for anyone looking to deploy their own private search engine.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-18T16:53:54+05:00",
            "date_modified": "2024-11-18T16:53:54+05:00"
        },
        {
            "id": "https://blog.ehmad.site/monitor-the-network-traffic-of-a-specific-app-on-windows/",
            "url": "https://blog.ehmad.site/monitor-the-network-traffic-of-a-specific-app-on-windows/",
            "title": "Monitor the network traffic of a specific APP on Windows ",
            "summary": "To monitor the network traffic of a specific app on Windows using Wireshark, follow these steps: To filter traffic from a specific app, first identify the app’s PID (Process ID): Alternatively: netstat -ano | findstr :&lt;Port Number&gt; Replace &lt;Port Number&gt; with the specific port number&hellip;",
            "content_html": "<p>To monitor the network traffic of a specific app on Windows using <strong>Wireshark</strong>, follow these steps:</p><h3 id=\"1-install-wireshark-if-not-already-installed\">1. <strong>Install Wireshark (if not already installed)</strong></h3>\n<ul>\n<li>Download and install Wireshark from <a href=\"https://www.wireshark.org/\">wireshark.org</a>.</li>\n<li>Make sure to also install <code>Npcap</code> during the installation, which is required for network capture.</li>\n</ul>\n<h3 id=\"2-identify-the-apps-process-id-pid\">2. <strong>Identify the App’s Process ID (PID)</strong></h3>\n<p>   To filter traffic from a specific app, first identify the app’s PID (Process ID):</p><ul>\n<li>Open <strong>Task Manager</strong> by pressing <code>Ctrl + Shift + Esc</code> or right-clicking the taskbar and selecting <strong>Task Manager</strong>.</li>\n<li>Go to the <strong>Details</strong> tab, find the app, and note the <strong>PID</strong>.</li>\n</ul>\n<p>   Alternatively:</p><ul>\n<li>Use the <code>netstat</code> command in Command Prompt to list processes with network connections:<pre><code>netstat -ano | findstr :&lt;Port Number&gt;\n</code></pre>\n<ul>\n<li>Replace <code>&lt;Port Number&gt;</code> with the specific port number if you know it.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-open-wireshark-and-select-network-interface\">3. <strong>Open Wireshark and Select Network Interface</strong></h3>\n<ul>\n<li>Launch Wireshark and select the network interface connected to the internet (usually <code>Wi-Fi</code> or <code>Ethernet</code>).</li>\n<li>Start capturing traffic by double-clicking the interface.</li>\n</ul>\n<h3 id=\"4-apply-a-filter-to-capture-traffic-of-the-specific-app\">4. <strong>Apply a Filter to Capture Traffic of the Specific App</strong></h3>\n<p>   Now, you can filter traffic based on the PID of the app.</p><ul>\n<li>In the Wireshark <strong>Display Filter</strong> bar, use the following filter format:<pre><code>tcp.port == &lt;port_number&gt;\n</code></pre>\nReplace <code>&lt;port_number&gt;</code> with the port used by the application.</li>\n</ul>\n<p>   Or if you don’t know the port:</p><ul>\n<li>Use the <strong>Capture Filter</strong> for IPs if you know the IP range of the traffic expected, or</li>\n<li>To track down which traffic belongs to your app dynamically, you might need to manually inspect connections, then fine-tune your filter.</li>\n</ul>\n<h3 id=\"5-analyze-the-captured-packets\">5. <strong>Analyze the Captured Packets</strong></h3>\n<ul>\n<li>Once you’ve filtered the packets to your application, analyze details like source and destination IPs, protocols, and data flow.</li>\n<li>Stop the capture when you have enough data to review.</li>\n</ul>\n<h3 id=\"additional-tips\">Additional Tips</h3>\n<ul>\n<li><strong>Use the <code>Process Monitor (ProcMon)</code></strong>: ProcMon can help to track which ports are opened by specific processes.</li>\n<li><strong>Use Wireshark’s Protocol Hierarchy and Statistics</strong>: To understand traffic types used by the app.\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://blog.ehmad.site/media/posts/10/Screenshot-2024-11-16-200027.png\" alt=\"Monitor the network traffic of a specific APP on Windows\" width=\"1920\" height=\"1080\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-xs.webp 640w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-sm.webp 768w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-md.webp 1024w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-lg.webp 1366w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-xl.webp 1600w ,https://blog.ehmad.site/media/posts/10/responsive/Screenshot-2024-11-16-200027-2xl.webp 1920w\"></figure>\nThis should give you insights into your app’s network activity specifically.</li>\n</ul>\n",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-16T20:01:30+05:00",
            "date_modified": "2024-11-16T20:01:30+05:00"
        },
        {
            "id": "https://blog.ehmad.site/how-to-mount-a-webdav-server-as-a-network-drive-in-windows-10/",
            "url": "https://blog.ehmad.site/how-to-mount-a-webdav-server-as-a-network-drive-in-windows-10/",
            "title": "How to Mount a WebDAV Server as a Network Drive in Windows 10",
            "summary": "Introduction Mapping a WebDAV server to a drive letter in Windows 10 allows for seamless file access, making it feel just like a local drive. This guide will walk you through the steps to connect your WebDAV server at https://example.com/webdev as a network drive in&hellip;",
            "content_html": "<h3 id=\"introduction\">Introduction</h3>\n<p>Mapping a WebDAV server to a drive letter in Windows 10 allows for seamless file access, making it feel just like a local drive. This guide will walk you through the steps to connect your WebDAV server at <code>https://example.com/webdev</code> as a network drive in Windows 10, allowing easy drag-and-drop functionality for managing files.</p><h3 id=\"prerequisites\">Prerequisites</h3>\n<p>Before we begin, ensure you have:</p><ul>\n<li>The WebDAV server URL (<code>https://example.com/webdev</code>).</li>\n<li>Credentials (username and password) for accessing the WebDAV server.</li>\n</ul>\n<h3 id=\"step-1-open-file-explorer\">Step 1: Open File Explorer</h3>\n<p>Start by opening <strong>File Explorer</strong> on your Windows 10 computer. You can do this quickly by pressing <strong>Windows + E</strong> on your keyboard.</p><h3 id=\"step-2-navigate-to-this-pc\">Step 2: Navigate to “This PC”</h3>\n<p>In File Explorer, click on <strong>This PC</strong> in the left sidebar. This is where we’ll add the WebDAV server as a network drive.</p><h3 id=\"step-3-map-network-drive\">Step 3: Map Network Drive</h3>\n<ol>\n<li>In the <strong>This PC</strong> window, go to the top menu and select <strong>Computer</strong>.</li>\n<li>Click on <strong>Map network drive</strong> from the dropdown menu. This will open the Map Network Drive wizard.</li>\n</ol>\n<h3 id=\"step-4-choose-a-drive-letter\">Step 4: Choose a Drive Letter</h3>\n<p>In the Map Network Drive wizard:</p><ul>\n<li><strong>Drive</strong>: Choose an available drive letter for the WebDAV server (e.g., <code>Z:</code>).</li>\n</ul>\n<p>Choosing a memorable drive letter will make it easy to find later.</p><h3 id=\"step-5-enter-the-webdav-url\">Step 5: Enter the WebDAV URL</h3>\n<p>In the <strong>Folder</strong> field, enter your WebDAV server URL:  </p><pre><code>https://example.com/webdev\n</code></pre>\n<h3 id=\"step-6-connect-using-different-credentials\">Step 6: Connect Using Different Credentials</h3>\n<p>Check the box labeled <strong>Connect using different credentials</strong>. This is important if your WebDAV server requires a username and password for access.</p><h3 id=\"step-7-finish-and-authenticate\">Step 7: Finish and Authenticate</h3>\n<ol>\n<li>Click <strong>Finish</strong> to complete the setup.</li>\n<li>A prompt will appear, asking you to enter your <strong>username</strong> and <strong>password</strong> for the WebDAV server. Input your credentials.</li>\n<li>Optionally, check <strong>Remember my credentials</strong> if you want Windows to save this information for future connections.</li>\n</ol>\n<h3 id=\"step-8-verify-the-connection\">Step 8: Verify the Connection</h3>\n<p>If the connection is successful, the WebDAV folder will be accessible as a network drive in <strong>This PC</strong> under the drive letter you selected. You can now access the WebDAV server directly from File Explorer, just like any other folder on your computer.</p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://blog.ehmad.site/media/posts/9/rtaImage.jpeg\" alt=\"How to Mount a WebDAV Server as a Network Drive in Windows 10\" width=\"1047\" height=\"606\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.ehmad.site/media/posts/9/responsive/rtaImage-xs.webp 640w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-sm.webp 768w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-md.webp 1024w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-lg.webp 1366w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-xl.webp 1600w ,https://blog.ehmad.site/media/posts/9/responsive/rtaImage-2xl.webp 1920w\"></figure><h3 id=\"troubleshooting-common-issues\">Troubleshooting Common Issues</h3>\n<p>If you encounter any problems connecting, here are a few solutions to try:</p><ul>\n<li><p><strong>WebDAV Client Compatibility</strong>: Windows’ built-in WebDAV client may not work with all servers. If you have connection issues, consider using a third-party client like <strong>Cyberduck</strong> or <strong>WinSCP</strong>.</p></li>\n<li><p><strong>Firewall or Antivirus Interference</strong>: Occasionally, firewall or antivirus settings may block WebDAV connections. Temporarily disable them to see if that resolves the issue.</p></li>\n<li><p><strong>Ensure HTTPS Compatibility</strong>: If your WebDAV server only supports HTTP, replace <code>https://</code> with <code>http://</code> in the URL. However, HTTPS is recommended for security.</p></li>\n</ul>\n<hr>\n<h3 id=\"conclusion\">Conclusion</h3>\n<p>Mapping a WebDAV server to a network drive in Windows 10 offers the convenience of cloud storage with the familiarity of a local drive. Now, you can manage files on your WebDAV server just as you would on any other drive. Enjoy the streamlined workflow and easy access to your files!</p><p>Let us know if you need help troubleshooting any issues or have questions about WebDAV setup on other platforms!</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-15T12:24:15+05:00",
            "date_modified": "2024-11-15T12:24:15+05:00"
        },
        {
            "id": "https://blog.ehmad.site/how-to-use-adb-wirelessly-over-wi-fi/",
            "url": "https://blog.ehmad.site/how-to-use-adb-wirelessly-over-wi-fi/",
            "title": "How to Use ADB Wirelessly Over Wi-Fi",
            "summary": "To use ADB (Android Debug Bridge) wirelessly, you’ll need to connect your Android device and your computer over the same Wi-Fi network. Here are the steps to do this: adb devices Your device should appear in the list. 3. Enable ADB over TCP/IP Run this&hellip;",
            "content_html": "<p>To use ADB (Android Debug Bridge) wirelessly, you’ll need to connect your Android device and your computer over the same Wi-Fi network. Here are the steps to do this:</p><h3 id=\"1-connect-your-device-via-usb-first\">1. Connect your device via USB first</h3>\n<ul>\n<li>Start by connecting your Android device to your computer with a USB cable.</li>\n<li>Ensure you have <strong>USB debugging</strong> enabled on your device. You can enable this by going to:<ul>\n<li><strong>Settings</strong> &gt; <strong>About Phone</strong> &gt; <strong>Build Number</strong> (tap 7 times to enable Developer Options).</li>\n<li>Then go to <strong>Developer Options</strong> &gt; <strong>USB Debugging</strong>.</li>\n</ul>\n</li>\n</ul>\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://blog.ehmad.site/media/posts/8/adb_wifi-wireless_debugging.png\" alt=\"Use ADB Wirelessly Over Wi-Fi\" width=\"365\" height=\"675\"  sizes=\"(max-width: 1920px) 100vw, 1920px\" srcset=\"https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-xs.webp 640w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-sm.webp 768w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-md.webp 1024w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-lg.webp 1366w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-xl.webp 1600w ,https://blog.ehmad.site/media/posts/8/responsive/adb_wifi-wireless_debugging-2xl.webp 1920w\"></figure><h3 id=\"2-open-a-terminal-or-command-prompt-on-your-computer\">2. Open a terminal or command prompt on your computer</h3>\n<ul>\n<li>Open the Command Prompt (Windows) or Terminal (Mac/Linux) where ADB is installed.</li>\n<li>Type the following command to ensure your device is recognized:<pre><code class=\"language-bash\">adb devices\n</code></pre>\nYour device should appear in the list.</li>\n</ul>\n<h3 id=\"3-enable-adb-over-tcpip\">3. Enable ADB over TCP/IP</h3>\n<ul>\n<li>Run this command to switch ADB to TCP/IP mode:<pre><code class=\"language-bash\">adb tcpip 5555\n</code></pre>\nThis sets ADB to listen for connections on port 5555.</li>\n</ul>\n<h3 id=\"4-find-your-devices-ip-address\">4. Find your device’s IP address</h3>\n<ul>\n<li>On your Android device, go to <strong>Settings</strong> &gt; <strong>About Phone</strong> &gt; <strong>Status</strong> &gt; <strong>IP address</strong> (or similar path, depending on the device).</li>\n<li>Note down the IP address (e.g., <code>192.168.1.5</code>).</li>\n</ul>\n<h3 id=\"5-connect-to-your-device-wirelessly\">5. Connect to your device wirelessly</h3>\n<ul>\n<li>Run the following command using your device’s IP address:<pre><code class=\"language-bash\">adb connect 192.168.1.5:5555\n</code></pre>\n</li>\n<li>Replace <code>192.168.1.5</code> with the actual IP address of your device.</li>\n</ul>\n<h3 id=\"6-disconnect-the-usb-cable\">6. Disconnect the USB cable</h3>\n<ul>\n<li>Now you can disconnect the USB cable. Your ADB connection should remain active over Wi-Fi.</li>\n<li>Verify the connection by running:<pre><code class=\"language-bash\">adb devices\n</code></pre>\nYou should see your device listed with the IP address instead of a USB ID.</li>\n</ul>\n<h3 id=\"7-use-adb-commands-wirelessly\">7. Use ADB commands wirelessly</h3>\n<p>Now you can run any ADB command wirelessly as long as your computer and the Android device remain on the same Wi-Fi network.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-14T12:08:13+05:00",
            "date_modified": "2024-11-14T12:08:13+05:00"
        },
        {
            "id": "https://blog.ehmad.site/authentication-token-manipulation-error-2/",
            "url": "https://blog.ehmad.site/authentication-token-manipulation-error-2/",
            "title": "Authentication token manipulation error",
            "summary": "The “Authentication token manipulation error” in Debian usually indicates an issue with permissions or file corruption in authentication-related files. Here’s a step-by-step guide to troubleshoot and fix this: sudo passwd ahmad If you’re still encountering the same issue, proceed with the next steps. 2. Ensure&hellip;",
            "content_html": "<p>The “Authentication token manipulation error” in Debian usually indicates an issue with permissions or file corruption in authentication-related files. Here’s a step-by-step guide to troubleshoot and fix this:</p><h3 id=\"1-check-if-youre-root-or-have-sudo-privileges\">1. <strong>Check if You’re Root or Have Sudo Privileges</strong></h3>\n<ul>\n<li>Make sure you’re running the <code>passwd</code> command as a root user or with <code>sudo</code> privileges. Run:<pre><code class=\"language-bash\">sudo passwd ahmad\n</code></pre>\n</li>\n<li>If you’re still encountering the same issue, proceed with the next steps.</li>\n</ul>\n<h3 id=\"2-ensure-filesystem-is-not-mounted-as-read-only\">2. <strong>Ensure Filesystem is Not Mounted as Read-Only</strong></h3>\n<ul>\n<li>Sometimes, the filesystem is in read-only mode, which prevents changes to authentication files.</li>\n<li>To check if the root filesystem is read-only, run:<pre><code class=\"language-bash\">mount | grep &#39; / &#39;\n</code></pre>\n</li>\n<li>If you see <code>ro</code> (read-only), remount it as read-write:<pre><code class=\"language-bash\">sudo mount -o remount,rw /\n</code></pre>\n</li>\n</ul>\n<h3 id=\"3-check-disk-space\">3. <strong>Check Disk Space</strong></h3>\n<ul>\n<li>Lack of disk space can cause this error. Check available disk space with:<pre><code class=\"language-bash\">df -h\n</code></pre>\n</li>\n<li>If your root partition (usually <code>/</code>) is full, try to free up space.</li>\n</ul>\n<h3 id=\"4-check-permissions-of-authentication-files\">4. <strong>Check Permissions of Authentication Files</strong></h3>\n<ul>\n<li>Make sure the permissions on key files are correct:<pre><code class=\"language-bash\">sudo ls -l /etc/passwd /etc/shadow /etc/gshadow\n</code></pre>\n</li>\n<li>The permissions should look like this:<pre><code>-rw-r--r-- 1 root root  /etc/passwd\n-rw------- 1 root shadow /etc/shadow\n-rw------- 1 root shadow /etc/gshadow\n</code></pre>\n</li>\n<li>If they don’t match, set them manually:<pre><code class=\"language-bash\">sudo chmod 644 /etc/passwd\nsudo chmod 640 /etc/shadow\nsudo chmod 640 /etc/gshadow\n</code></pre>\n</li>\n</ul>\n<h3 id=\"5-try-resetting-the-password-again\">5. <strong>Try Resetting the Password Again</strong></h3>\n<p>   After performing the above steps, try resetting the password again:</p><pre><code class=\"language-bash\">sudo passwd ahmad\n</code></pre>\n<h3 id=\"6-reboot-as-a-last-resort\">6. <strong>Reboot as a Last Resort</strong></h3>\n<ul>\n<li>If none of the above steps work, try rebooting the system to see if it resolves the issue:<pre><code class=\"language-bash\">sudo reboot\n</code></pre>\n</li>\n</ul>\n<p>If the error persists after following these steps, there may be a deeper issue with the system files.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-14T11:21:23+05:00",
            "date_modified": "2024-11-14T11:21:23+05:00"
        },
        {
            "id": "https://blog.ehmad.site/block-icmp-internet-control-message-protocol-echo-requests-ping/",
            "url": "https://blog.ehmad.site/block-icmp-internet-control-message-protocol-echo-requests-ping/",
            "title": "block ICMP (Internet Control Message Protocol) echo requests &quot;Ping&quot;",
            "summary": "To configure a server so that it does not respond to ping requests, you can block ICMP (Internet Control Message Protocol) echo requests, which are what ping uses to check if a server is reachable. Here are some ways to achieve this depending on your&hellip;",
            "content_html": "<p>To configure a server so that it does not respond to ping requests, you can block ICMP (Internet Control Message Protocol) echo requests, which are what <code>ping</code> uses to check if a server is reachable. Here are some ways to achieve this depending on your server’s operating system.</p><h3 id=\"for-linux-using-iptables-or-ufw\">For Linux (using <code>iptables</code> or <code>ufw</code>)</h3>\n<h4 id=\"using-iptables\">Using <code>iptables</code></h4>\n<ol>\n<li><p>Open a terminal on your server.</p></li>\n<li><p>Run the following command to drop ICMP echo requests:</p><pre><code class=\"language-bash\">sudo iptables -A INPUT -p icmp --icmp-type echo-request -j DROP\n</code></pre>\n<p>This command adds a rule to the firewall to drop all incoming ping requests.</p></li>\n<li><p>To make this rule persistent (so it survives a reboot), save your iptables rules:</p><pre><code class=\"language-bash\">sudo iptables-save &gt; /etc/iptables/rules.v4\n</code></pre>\n<p>(Location of <code>rules.v4</code> may vary depending on distribution; for example, it might be <code>/etc/iptables.up.rules</code>.)</p></li>\n</ol>\n<h4 id=\"using-ufw-if-ufw-is-installed\">Using <code>ufw</code> (if <code>ufw</code> is installed)</h4>\n<ol>\n<li><p>Open a terminal on your server.</p></li>\n<li><p>Disable ICMP echo requests with:</p><pre><code class=\"language-bash\">sudo ufw deny proto icmp\n</code></pre>\n<p>This will configure <code>ufw</code> to block all ICMP requests, including pings.</p></li>\n</ol>\n<h3 id=\"for-windows-server-using-windows-firewall\">For Windows Server (using Windows Firewall)</h3>\n<ol>\n<li>Open <strong>Windows Defender Firewall</strong> with Advanced Security.</li>\n<li>Go to <strong>Inbound Rules</strong>.</li>\n<li>Look for <strong>File and Printer Sharing (Echo Request - ICMPv4-In)</strong> and <strong>File and Printer Sharing (Echo Request - ICMPv6-In)</strong> rules.</li>\n<li>Right-click on these rules and select <strong>Disable</strong>.</li>\n</ol>\n<h3 id=\"to-re-enable-ping-responses\">To Re-enable Ping Responses</h3>\n<p>To allow ping responses again:</p><ul>\n<li><p><strong>Linux (iptables)</strong>: Remove the rule by running:</p><pre><code class=\"language-bash\">sudo iptables -D INPUT -p icmp --icmp-type echo-request -j DROP\n</code></pre>\n</li>\n<li><p><strong>Linux (ufw)</strong>: Run:</p><pre><code class=\"language-bash\">sudo ufw allow proto icmp\n</code></pre>\n</li>\n<li><p><strong>Windows</strong>: Re-enable the <strong>File and Printer Sharing (Echo Request)</strong> rules in the Windows Firewall.</p></li>\n</ul>\n<p>These steps will configure your server to ignore ping requests, effectively making it “invisible” to ping commands while still accessible for other network services.</p>",
            "author": {
                "name": "Ehmad"
            },
            "tags": [
            ],
            "date_published": "2024-11-14T11:19:08+05:00",
            "date_modified": "2024-11-14T11:19:08+05:00"
        }
    ]
}
